v neovim current file
  nvim %f

Grafana restart
  sudo service grafana-server restart

set auto date & time
  tput reset
  sudo /etc/init.d/ntp stop
  sudo ntpd -q -g
  sudo /etc/init.d/ntp start

update
  tput reset
  sudo apt-get -y autoremove
  sudo apt-get -y update
  sudo apt-get -y dist-upgrade
  sudo apt-get -y upgrade
  #sudo rpi-update

exit tmux and ssh
  tmux detach

Sync from Google Drive (Pull)
  cd /media/hdd/drive
  drive pull --no-prompt -fix-clashes

_ create new user
  sudo adduser bot
  sudo adduser bot sudo
  sudo adduser bot adm
  sudo visudo
  #pi   ALL=(ALL) ALL
  #bot  ALL=(ALL) NOPASSWD: ALL
  sudo reboot
  sudo apt-get update
  sudo deluser pi sudo
  sudo deluser pi adm
  sudo deluser -remove-home pi

config: tmux logon
  tput reset
  cat << 'EOF' | tee -a ~/.profile
  if [ -z "$TMUX" ]; then
  /bin/sh ~/rpi/start.sh
  fi
  EOF

config: clone rpi mc.menu
  tput reset
  rm -rf ~/rpi
  git clone https://github.com/ManuCart/Raspberry-Pi.git ~/rpi

+ t t
git push
  tput reset
  for f in %t; do
    git add "$f"
  done
  git commit -m "update"
  git push

+ t t
git push force
  tput reset
  for f in %t; do
    git add "$f"
  done
  PARAM=%{parameters}
  git commit -m "$PARAM"
  git push origin master --force

+ t t
git pull
  tput reset ; git pull

+ t t
git discard the local changes
  tput reset ; git reset --hard ; git pull

⠀
  # blank symbol line before (U+2800)
  tput reset

import SD card photos & upload to Google Drive
  tput reset ; source ~/config.ini
  cd /media/hdd/drive
  drive pull --no-prompt --fix-clashes
  drive clashes --fix
  if [ ! -d /media/cardreader ] ; then mkdir /media/cardreader ; fi
  sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader
  cp -v /media/cardreader/DCIM/???_PANA/*.JPG /media/hdd/drive/Photos/TEMP
  sudo umount /media/cardreader
  drive push --no-prompt
  tm "SD card photos uploaded to Google Drive"

import SD card videos & merge & upload to youtube
  tput reset ; source ~/config.ini
  rm /media/hdd/youtube-upload/*
  sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader
  cp -v /media/cardreader/DCIM/???_PANA/*.MP4 /media/hdd/youtube-upload
  sudo umount /media/cardreader
  tm "Import done You can remove SD card reader"
  cd /media/hdd/youtube-upload
  FILES=`find *.* -printf "%%f + " | sort`
  mkvmerge -o out.mkv $FILES
  youtube-upload --title="-" --privacy="private" out.mkv
  tm "Backup done Merge & uploaded to youtube"
  sleep 30m
  tm "Youtube done Can watch to youtube"

backup photos & videos to backup hdd
  tput reset ; source ~/config.ini
  sudo mount -t ntfs-3g -L backup /media/backup
  mkdir /media/backup/photos /media/backup/videos
  rsync --bwlimit=5000 --archive --no-o --no-g --delete --info=progress2 /media/hdd/backup/photos/ /media/backup/photos
  rsync --bwlimit=5000 --archive --no-o --no-g --delete --info=progress2 /media/hdd/backup/videos/ /media/backup/videos
  sudo umount /media/backup
  tm "Photos & Videos Backup done"

backup videos from youtube download playlist
  tput reset ; source ~/config.ini
  if [ ! -d /media/hdd/videos ] ; then mkdir /media/hdd/videos ; fi
  youtube-dl --limit-rate 4M --abort-on-error --format 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' \
  --merge-output-format mp4 --output "/media/hdd/videos/%%(title)s.%%(ext)s" https://www.youtube.com/playlist?list=$Playlist
  tm "backup videos from youtube download playlist done"

⠀
  # blank symbol line before (U+2800)
  tput reset

mount backup drive  
  sudo mount -t ntfs-3g -L backup /media/backup

mount ntfs usbkey
  tput reset ; sudo mount -t ntfs-3g `ls /dev/disk/by-id/usb*-part1` /media/usbkey

mount-cardreader
  tput reset ; sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader

mount-hdd
  tput reset ; sudo mount /dev/sda1 /media/hdd

mount-freebox
  #Tip : To know uid -> cat /etc/passwd
  tput reset ; sudo mount -t cifs //mafreebox.freebox.fr/Freebox/  /media/freebox -o user=freebox,password=Freebox4K,cache=none,uid=1001,iocharset=utf8,file_mode=0777,dir_mode=0777,vers=1.0

format hdd drive
  #Remove comment sign for next lignes only to format HDD
  #sudo mkfs.ext4 /dev/sda1 -L RaspberryPi
  #sudo e2label /dev/sda1 RaspberryPi
  #sudo chown -R pi:pi /media/hdd

create fstab file
  tput reset
  echo 'LABEL="RaspberryPi" /media/hdd ext4 nofail,noatime 0 2' | sudo tee -a /etc/fstab
  echo '//mafreebox.freebox.fr/Server\ Freebox/ /media/freebox cifs _netdev,rw,user=freebox,password=Freebox4K,iocharset=utf8,uid=1000,sec=ntlm,file_mode=0777,dir_mode=0777,vers=1.0 0 0' | sudo tee -a /etc/fstab
  sudo chown -R pi:pi /media/hdd

create new raspbian image
  tput reset ; source ~/config.ini
  #Use lsblk to check /dev/sdc
  rm /media/hdd/raspbian.zip
  curl --progress-bar -L -o /media/hdd/raspbian.zip https://downloads.raspberrypi.org/raspbian_lite_latest
  #curl --progress-bar -L -o /media/hdd/raspbian.zip https://downloads.raspberrypi.org/raspbian_full_latest
  #curl --progress-bar -L -o /media/hdd/raspbian.zip https://downloads.raspberrypi.org/raspbian_latest
  #unzip -p raspbian.zip | sudo dd of=/dev/sda bs=4M status=progress conv=fsync
  unzip -p /media/hdd/raspbian.zip | sudo dd of=/dev/sda bs=4M conv=fsync
  sudo mkdir /media/cardreader
  sudo mount /dev/sda1 /media/cardreader
  sudo touch /media/cardreader/ssh
  sudo umount /media/cardreader
  tm "New Raspbian Image Created"

+ t t
ez Copy
  tput reset ; DIR=%D ; set %t
  for FILE in "$@"; do
    echo "Copy : $FILE to $DIR"
    rsync --archive --no-o --no-g --info=progress2 "$FILE" "$DIR"
  done

+ t t
ez Move
  tput reset ; DIR=%D ; set %t
  for FILE in "$@"; do
    echo "Move : $FILE to $DIR"
    rsync --archive --no-o --no-g --info=progress2 --remove-sent-files "$FILE" "$DIR"
  done

+ t t
Delete
  tput reset ; set %t
  while [ -n "$1" ] ; do
    rm -rf "$1" ; shift
  done

+ t t
upload to dropbox
  tput reset ; source ~/config.ini
  cd %d ; set %t
  for FILE in "$@"; do
    dropbox_uploader upload "$FILE" "$FILE"
  done
  tm "Files uploaded to Dropbox"

download from dropbox
  param = %{Dropbox Filename}
  tput reset ; cd %d
  dropbox_uploader download "$param"

download from google drive
  param = %{Google Drive Filename}
  tput reset ; cd "/media/hdd/Drive"
  if ! drive pull --no-prompt "$param" ; then tm "ERROR Google pull files" "ERROR PULL DRIVE"; return; fi

+ t t
move to "Freebox Server"
 tput reset ; source ~/config.ini
 sudo mount -t cifs //mafreebox.freebox.fr/Freebox/  /media/freebox -o user=freebox,password=Freebox4K,cache=none,uid=1001,iocharset=utf8,file_mode=0777,dir_mode=0777,vers=1.0
 cd %d ; set %t
 for FILE in "$@"; do
   echo "Copy : $FILE"
   rsync --bwlimit=5000 --archive --no-o --no-g --info=progress2 --remove-sent-files "$FILE" "/media/freebox"
 done
 tm "Files moved to Freebox"

+ t t
upload to Gdrive
  cd /media/hdd/Drive
  #drive pull --no-prompt "Raspberry Pi/"
  tput reset ; cd %d ; set %t
  for FILE in "$@"; do
    cp "$FILE" "/media/hdd/Drive/Raspberry Pi/"
  done
  cd /media/hdd/Drive
  if ! drive pull --no-prompt "Raspberry Pi/" ; then tm "ERROR Google push files ERROR PUSH DRIVE"; return; fi

import gopro
  ID="/dev/disk/by-id/usb-GoPro_Storage_*-0:0-part1"
  sudo mount $ID /media/gopro
  mkdir /media/hdd/gopro /media/hdd/gopro/photos /media/hdd/gopro/videos
  cp -v /media/gopro/DCIM/???GOPRO/*.JPG /media/hdd/gopro/photos
  cp -v /media/gopro/DCIM/???GOPRO/*.MP4 /media/hdd/gopro/videos
  tm "photos and videos from gopro are saved"
  rm /tmp/copy-gopro
  sudo umount /media/gopro

import usbkey
  ID="/dev/disk/by-id/usb-Kingston_DataTraveler_3.0_*-0:0-part1"
  VIDEOS="/media/hdd/youtube-upload"
  sudo mkdir /media/usbkey
  sudo mount $ID /media/usbkey
  rsync --archive --info=progress2 /media/usbkey/ $VIDEOS
  sudo umount /media/usbkey

+ t t
Upload to Google Music
  tput reset ; source ~/config.ini
  account=%{account number}
  tput reset ; cd %d ; set %t
  for d in "$@"; do gms upload -u $account "$d"; done
  tm "Rasperry Pi gmusic upload done"

+ t t
Download from Google Music
  tput reset ; source ~/config.ini
  account=%{Give account number}
  gms download -u $account "/media/hdd/music/%album%/%title%"
  tm "Rasperry Pi gmusic download done"

+ f\.wav & t t
wav to mp3
  tput reset ; cd %d ; set %t
  for d in "$@"; do lame --preset extreme -q 0 -h "$1" "$1.mp3"; done

+ f\.mp3 & t t
concat mp3
  #sudo apt-get install mp3wrap
  tput reset ; cd %d ; set %t
  mp3wrap output.mp3 $@;

+ f\.flac & t t
flac to mp3
  tput reset ; cd %d ; set %t
  for f in "$@"; do
    album="$(metaflac --show-tag=album "$f" | sed 's/[^=]*=//')"
    artist="$(metaflac --show-tag=artist "$f" | sed 's/[^=]*=//')"
    date="$(metaflac --show-tag=date "$f" | sed 's/[^=]*=//')"
    title="$(metaflac --show-tag=title "$f" | sed 's/[^=]*=//')"
    year="$(metaflac --show-tag=date "$f" | sed 's/[^=]*=//')"
    genre="$(metaflac --show-tag=genre "$f" | sed 's/[^=]*=//')"
    tracknumber="$(metaflac --show-tag=tracknumber "$f" | sed 's/[^=]*=//')"
    flac --decode --stdout "$f" | lame --preset extreme --add-id3v2 --tt "$title" --ta "$artist" --tl "$album" --ty "$year" --tn "$tracknumber" --tg "$genre" - "${f%.flac}.mp3"
  done

Take Raspberry Pi Photo
  tput reset
  raspistill -v -rot 180 -o /media/hdd/photo.jpg
  source ~/config.ini
  #curl -s -X POST https://api.telegram.org/bot$apiToken/sendPhoto -d photo="/media/hdd/photo.jpg" -d chat_id=$userChatId
  #curl -s -X POST https://api.telegram.org/bot$apiToken/sendPhoto -d photo="/media/hdd/photo.jpg" -d chat_id=@MyChannel
  dropbox_uploader upload /media/hdd/photo.jpg /Camera/$(date +"%%Y%%m%%dT%%H%%M%%S").JPG
  rm /media/hdd/photo.jpg

Found double photos
  sudo apt-get -y install fslint fdupes
  /usr/share/fslint/fslint/fslint "/media/hdd/drive/Google Photos" > photos_double.txt
  fdupes -Sr "/media/hdd/drive/Google Photos" > ~/photos_double2.txt
  tm "Search double Photos Finish"

+ f\.avi | f\.AVI | f\.mkv | f\.MKV | f\.mp4 | f\.MP4 & t t
vlc upload (iphone)
  tput reset ; cd %d ; set %t
  for FILE in "$@"; do
   echo "Upload to VLC : $FILE"
   curl -# -F file=@"$FILE" http://192.168.0.151/upload.json
   echo
  done

+ f\.avi | f\.AVI | f\.mkv | f\.MKV | f\.mp4 | f\.MP4 & t t
vlc upload (ipad)
  tput reset ; cd %d ; set %t
  for FILE in "$@"; do
   echo "Upload to VLC : $FILE"
   curl -# -F file=@"$FILE" http://192.168.0.150/upload.json
   echo
  done

tv-dl
  mcedit -x /media/hdd/tmp/youtube.txt
  tput reset ; source ~/config.ini; cd /media/hdd/youtube-dl
  while IFS=, read url out ; do
    if [[ $url == h* ]]; then
    if [[ $out == "" ]]; then youtube-dl --fixup warn $url; else
    youtube-dl --fixup warn -o "$out" $url; fi
    fi
  done < /media/hdd/tmp/youtube.txt
  tm "Youtube-dl tv-dl done"

+ f *.mp4 | f *.MP4 & t t
conv mp4 to aac
  set %t
  aac="$(basename "$1" | cut -d . -f1).aac"
  avconv -loglevel panic -i "$1" -c copy -map 0:a:0 "$aac"

+ f \.mp4 | f \.MP4 & t t
mux mp4 and aac to mkv
  set %t
  aac="$(basename "$1" | cut -d. -f1).aac"
  mkv="$(basename "$1" | cut -d. -f1).mkv"
  MP4Box -add "$1" -add "$aac" "$mkv"

+ f \.avi | f \.AVI | f \.mkv | f \.mov | f \.MOV | f \.mp4 | f \.MP4 | f \.mts | f \.webm | f \.wmv & t t
upload to youtube
  tput reset ; source ~/config.ini ; cd %d ; set %t
  for FILE in "$@"; do
    #while ! youtube-upload --title="$FILE" --category="Entertainment" --privacy="private" \
    youtube-upload --title="-" --privacy="private" "$FILE"
    #"$FILE" ; do :; done
  done
  tm "Youtube Upload done"

+ f \.mts | f \.MTS | f \.mov | f \.MOV | f \.avi | f \.AVI | f \.mp4 | f \.MP4 | f \.webm & t t
merge mkv
  tput reset ; cd %d ; set %t
  FILES="$1"; shift
  for FILE in "$@"; do
    FILES="$FILES + $FILE"
  done
  mkvmerge -o out.mkv $FILES

+ f \.mp4 | f \.MP4 & t t
merge mp4
  tput reset ; cd %d ; set %t
  #FILES="-cat $1" ; shift
  FILES="-force-cat -add $1" ; shift
  for FILE in "$@"; do
    FILES="$FILES -cat $FILE"
  done
  echo "$FILES"
  MP4Box $FILES -new merged.mp4

+ f \.mp4 | f \.MP4 & t t
extract mp4 video without sound
  tput reset ; cd %d ; set %t
  #Never tested
  for FILE in "$@"; do
    mkvextract tracks out.mkv 0:$1.mp4
    shift
  done

+ f \.mp4 | f \.MP4 & t t
rotate 90 mp4
  tput reset ; cd %d ; set %t
  for FILE in "$@"; do
    avconv -i "$FILE" -vf transpose=1 -strict experimental "Rotate-$FILE"
  done

+ f \.mov | f \.MOV | f \.avi | f \.AVI | f \.mp4 | f \.MP4 | f \.mkv | f \.MKV & t t
cut video
  tput reset
  read -e -p "Start : " -i "00:00:00" start
  read -e -p "Stop  : " -i "00:00:00" stop
  echo "Please Wait..."
  mpv -ss $start -endpos $stop -ovc copy -oac pcm %f -o %b-CUT.%x

create stopmotion
  tput reset ; source ~/config.ini
  # - 720p (1280×720)
  # – 1080p (1920×1080) full HD
  # – 1440p (2560×1440) 2K
  # – 2160p (3840×2160) 4K
  # – 4320p (7680×4320) 8K
  ###GoPro 2592x1944 => 1440p(2K):2560x1440
  ###DMC TZ40 ????x???? => 1440p(2K):2560x1440
  CUT="2560x1440+16+0" #Top
  #CUT="2560x1440+16+252" #Center
  #CUT="2560x1440+16+504" #Bas
  ###Sony 4000x3000 => 2160p(4K):3840x2160
  #CUT="3840x2160+80+0" #Top
  #CUT="3840x2160+80+420" #Center
  #CUT="3840x2160+80+840" #Bas
  cd /media/hdd/DCIM
  mkdir CROP
  for img in *.JPG; do
  echo "Convert $img"
  #convert "$img" -crop $CUT "CROP/$img-CROP.JPG"
  #convert -rotate "90" "$img" "CROP/$img-CROP.JPG"
  done
  #ls -1 CROP/*-CROP.JPG >  files.lst
  ls -1 *.JPG >  files.lst
  mpv mf://@files.lst -mf-type=jpg -mf-fps=7.5 -ovc=rawvideo -no-audio -o stopmotion.avi
  youtube-upload --title="Stopmotion" --category="Entertainment" --privacy="private" stopmotion.avi
  tm "Raspberry Pi Stopmotion created"

download youtube playlist and merge with external music
  youtube-dl -k https://www.youtube.com/playlist?list=1234567890
  #Be careful first add next cat
  FILES="-force-cat -add 1.mp4 -cat 2.mp4 -cat 3.mp4 (...)"
  MP4Box $FILES -new merged.mp4
  mkvmerge -o output-with-sound.mkv -A input-video.mkv soundfile.mp3

download music from youtube video
  youtube-dl --extract-audio --audio-format mp3 $1 -o temp.mp3
  avconv -i temp.mp3 -ss 00:13:58 -to 00:15:44 -c copy -y music.mp3
  avconv -i "concat:1.MTS|2.MTS|3.MTS" -c copy output.mts

switch to tmux background
  tmux switch-client -t bg
  tmux send -t bg:1 'tmux send -t pi:1 F2' ENTER
  tmux send -t bg:1 'tmux switch-client -t pi'

create tmux window
  tmux new-window -n "●"
  session=`tmux display-message -p '#I'`
  tmux set pane-border-format " $session "
  tmux send -t $session '. ~/mcui/functions' ENTER
  tmux send -t $session '/usr/bin/mc -x /home/pi/rpi/ /media/hdd/ && clear' ENTER

download with aria2c
  rm -rf /media/hdd/drive/Torrents/*
  rm  ~/aria2-torrents
  cd /media/hdd/drive
  drive pull --quiet Torrents/
  find /media/hdd/drive/Torrents/*.torrent -type f | while read FILE ; do
  echo "$FILE" >> ~/aria2-torrents
  done
  #aria2c --max-overall-download 4M --max-overall-upload-limit=200K --max-concurrent-downloads=25 --dir=/media/hdd --input-file=/home/dev/aria2-torrents
  aria2c --max-overall-upload-limit=200K --max-concurrent-downloads=25 --dir=/media/hdd --input-file=/home/dev/aria2-torrents

+ f *.jpg | f *.JPG
drive push rpi
  drive push --no-prompt

+ f *.jpg | f *.JPG
drive pull rpi
  drive pull --no-prompt

+ f *.pdf | f *.PDF & t t
Uncrypt PDF
  set %t
  while [ -n "$1" ]; do
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$1.uncrypted.pdf" "$1"
    shift
  done

⠀
  # blank symbol line before (U+2800)
  tput reset

A Drive pull Documents and Snoozed
  tput reset ; source ~/config.ini
  GDRIVE=/media/hdd/drive ; cd $GDRIVE
  if ! drive pull --no-prompt -fix-clashes $GDRIVE/Snoozed $GDRIVE/Documents $GDRIVE/Notices ; then tm "Merge PDF RROR PULL GDRIVE" ; exit; fi

+ t t
B Merge PDF T source files t destination File
  # T source files t destination Files
  tput reset ; source ~/config.ini ; array=()
  set %T ; for FILE in "$@"; do
    if grep -r "Encrypt" "%D/$FILE" ; then echo "ERROR : $FILE CRYPTED" ; tm "ERROR PDF CRYPTED $FILE"; exit; fi
    array+=("%D/$FILE") ; done
  set %t ; for FILE in "$@"; do
    if grep -r "Encrypt" "%d/$FILE" ; then echo "ERROR : $FILE CRYPTED" ; tm "ERROR PDF CRYPTED $FILE"; exit; fi
    array+=("%d/$FILE") ; done
  pdfunite "${array[@]}" "$(dirname "${array[-1]}")/!$(basename "${array[-1]}")"
  rm "${array[@]}"
  tm "ALL PDF FILES MERGED SUCCESSFULLY"

C Drive push Documents and Snoozed
  tput reset ; source ~/config.ini
  GDRIVE=/media/hdd/drive ; cd $GDRIVE
  if ! drive push --no-prompt $GDRIVE/Snoozed $GDRIVE/Documents $GDRIVE/Notices ; then iftt "Merge PDF" "ERROR PUSH GDRIVE" ; exit; fi

⠀
  # blank symbol line before (U+2800)
  tput reset

disable bt and wifi
  tput reset
  echo "dtoverlay=pi3-disable-wifi" | sudo tee -a /boot/config.txt
  echo "dtoverlay=pi3-disable-bt" | sudo tee -a /boot/config.txt
  sudo systemctl disable hciuart
  sudo reboot

install: node.js
  # https://nodejs.org
  tput reset
  VERSION=10.16.0
  sudo apt-get -y install build-essential
  wget https://nodejs.org/dist/v$VERSION/node-v$VERSION-linux-armv7l.tar.gz -O node.tar.gz
  sudo tar -xvf node.tar.gz --strip 1 -C /usr/local
  rm node.tar.gz

install: prerequisites
  tput reset
  sudo apt-get install git gpac libav-tools mkvtoolnix mpv exiv2 mc rsync tmux ntfs-3g ghostscript

install: tmux
  # https://github.com/tmux/tmux
  tput reset
  tmux -V
  tmux kill-server
  sudo apt-get install -y libevent-dev libncurses5-dev
  wget https://github.com/tmux/tmux/releases/download/2.8/tmux-2.8.tar.gz
  tar xvfz tmux-2.8.tar.gz
  cd tmux-2.8
  ./configure && make
  sudo cp ./tmux /usr/bin/tmux
  tmux -V
  cd ..
  rm tmux-2.8.tar.gz
  rm -rf tmux-2.8

install: nvim
  # https://github.com/neovim/neovim
  sudo apt-get install -y git libtool libtool-bin autoconf automake cmake g++ pkg-config unzip libffi-dev
  git clone https://github.com/neovim/neovim.git
  cd neovim
  make CMAKE_BUILD_TYPE=RelWithDebInfo
  sudo make install

install: mc
  # https://github.com/MidnightCommander/mc
  tput reset
  sudo apt-gen install autogen autoconf libtool gettext libslang2-dev
  wget https://github.com/MidnightCommander/mc/archive/4.8.20.tar.gz
  tar xvfz 4.8.20.tar.gz
  cd mc-4.8.20
  autoconf
  ./configure
  make
  make install

install: git
  # https://github.com/ManuCart/Raspberry-Pi
  tput reset
  sudo apt-get install git
  git clone git@github.com:ManuCart/Raspberry-Pi.git ~/rpi
  cd rpi
  ssh-keygen -t rsa -b 4096 -C "Raspberry Pi" -f $HOME/.ssh/github
  # Copy contents github.pub to github.com
  eval $(ssh-agent -s)
  ssh-add ~/.ssh/github
  ssh -vT git@github.com
  git remote set-url origin git@github.com:ManuCart/Raspberry-Pi.git
  git config --global user.name "ManuCart"
  git config --global user.email "John.Smith@example.com"
  echo -e "Host github.com \n IdentityFile ~/.ssh/github" >> ~/.ssh/config

install: Dropbox-Uploader
  # https://github.com/andreafabrizi/Dropbox-Uploader
  tput reset
  sudo curl -o /usr/local/bin/dropbox_uploader \
  https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh
  sudo chmod +x /usr/local/bin/dropbox_uploader
  dropbox_uploader init

install: drive
  # https://github.com/odeke-em/drive
  tput reset
  go get -u github.com/odeke-em/drive/cmd/drive
  mkdir /media/hdd/drive
  drive init /media/hdd/drive

install: google-music-scripts
  # https://github.com/thebigmunch/google-music-scripts
  tput reset
  sudo apt-get install libav-tools #avconv
  sudo pip3.7 install -U google-music-scripts

install: Pi Hole
  tput reset
  curl -sSL https://install.pi-hole.net | bash

install: Samba
  tput reset  
  sudo apt-get -y install samba samba-common-bin
  cat << EOF | sudo tee -a /etc/samba/smb.conf
  [HDD]
  comment = Raspberry Pi Hard Drive
  path = /media/hdd
  read only = no
  browsable = yes
  EOF
  sudo service smbd restart
  sudo smbpasswd -a pi

install: ssh
  ssh-keygen
  mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
  sudo chmod 644 ~/.ssh/authorized_keys
  sudo chown $USER:$USER ~/.ssh/authorized_keys
  cat << EOF | sudo tee -a /etc/ssh/sshd_config
  #AuthorizedKeysFile /home/$USER/.ssh/authorized_keys
  UsePAM yes
  PermitRootLogin no
  PasswordAuthentication no
  ChallengeResponseAuthentication no
  EOF
  sudo service ssh restart
#With PuttyGen.exe
#Conversions => Import Key (id_rsa)
#Save Private Key and Yes to save without a passphrase.
#Choose a location and a name for the new .ppk key

install: youtube-dl
  # https://github.com/rg3/youtube-dl
  sudo apt-get -y install libavcodec-extra libav-tools
  sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
  sudo chmod a+rx /usr/local/bin/youtube-dl
  echo "<youtube-dl Playlist Link>" > ~/.youtube-dl
  mkdir /medi/hdd/youtube-dl
  youtube-dl --output "/media/hdd/youtube-dl/%(title)s.%(ext)s" https://www.youtube.com/playlist?list=`cat ~/.youtube-dl`

install: youtube-upload
  # https://github.com/tokland/youtube-upload
  # Warning https://github.com/tokland/youtube-upload/pull/264
  sudo pip install --upgrade google-api-python-client oauth2client progressbar2
  wget https://github.com/tokland/youtube-upload/archive/master.zip
  unzip master.zip
  cd youtube-upload-master
  sudo python setup.py install
  dropbox_uploader download /opt/key/youtube-upload-client-secret.json
  mv youtube-upload-client-secret.json .client_secrets.json
  dropbox_uploader download /opt/key/samplevideo.mp4
  youtube-upload --title="test" --privacy="private" samplevideo.mp4
  cd ..
  rm samplevideo.mp4 master.zip
  sudo rm -rf youtube-upload-master
