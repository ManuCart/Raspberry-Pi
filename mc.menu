 # To run under mc
 # sudo ln -sf bash /bin/sh
 #
 # figlet -f banner backup
 #
 # black     0
 # red       1
 # green     2
 # yellow    3
 # blue      4
 # magenta   5
 # cyan      6
 # white     7

+ ! f backup | ! f system | ! f import | ! f music | ! f torrent | ! f photos | ! f install | ! f github
[[  menu  ]]
  N=`tmux display-message -p '#W'`
  tmux send -t bg:1 'tmux send -t pi:'+$N+' M-c ~/mc.menu ENTER' ENTER

[[  edit  ]]
  N=`tmux display-message -p '#W'`
  tmux send -t bg:1 'tmux send -t pi:'+$N+' M-c ~/rpi ENTER m F4' ENTER

[[  test  ]]
  #echo -e "\e[?1000h";read -r -N 1;echo -e "\e[?1000l"
  #. ~/.local/share/mc/bashrc
  #echo $SHELL
  #ifttt "mc menu" "finish"
  exit && mc /home/pi/djvu


  ####   ####  #    # ###### #  ####
 #    # #    # ##   # #      # #    #
 #      #    # # #  # #####  # #
 #      #    # #  # # #      # #  ###
 #    # #    # #   ## #      # #    #
  ####   ####  #    # #      #  ####

+ f config
Create ~/mc.menu
  clear
  if [ ! -d ~/mc.menu ] ; then mkdir ~/mc.menu ; fi
  cd ~/mc.menu
  touch "backup" "config" "files" "import" "music" "github"
  touch "system" "tools" "videos" "torrent" "photos" "install"

+ f config
create media sub-folders
  clear
  sudo mkdir /media/hdd /media/freebox /media/cardreader /media/usbkey /media/iphone /media/camera /media/gopro

+ f config
source ~/.tmux.conf
  clear
  tmux source-file ~/.tmux.conf
  tmux send -t B 'tmux send -t A F2' ENTER

+ f config
create new file
  clear ; touch %{File name}

+ f config
set auto date & time
  clear
  sudo /etc/init.d/ntp stop
  sudo ntpd -q -g
  sudo /etc/init.d/ntp start

+ f config
exit tmux and ssh
  tmux detach

+ f config
create new user
  sudo adduser bot
  sudo adduser bot sudo
  sudo adduser bot adm
  sudo visudo
  #pi   ALL=(ALL) ALL
  #bot  ALL=(ALL) NOPASSWD: ALL
  sudo reboot
  sudo apt-get update
  sudo deluser pi sudo
  sudo deluser pi adm
  sudo deluser -remove-home pi

+ f config
start tmux after logon
  cat << 'EOF' | tee -a ~/.profile
  if [ -z "$TMUX" ]; then
  /bin/sh ~/rpi/rescue
  fi
  EOF

  ####  # ##### #    # #    # #####
 #    # #   #   #    # #    # #    #
 #      #   #   ###### #    # #####
 #  ### #   #   #    # #    # #    #
 #    # #   #   #    # #    # #    #
  ####  #   #   #    #  ####  #####

+ f github
clone rpi
  rm -rf ~/rpi
  git clone https://github.com/ManuCart/Raspberry-Pi.git ~/rpi

+ t t
git push
  clear
  for f in %t; do
    git add "$f"
  done
  git commit -m "update"
  git push

+ F github & t t
git push force
  clear
  for f in %t; do
    git add "$f"
  done
  PARAM=%{parameters}
  git commit -m "$PARAM"
  git push origin master --force

+ F github
git pull
  clear ; git pull

+ f github
git discard the local changes
  clear ; git reset --hard ; git pull


 #####    ##    ####  #    # #    # #####
 #    #  #  #  #    # #   #  #    # #    #
 #####  #    # #      ####   #    # #    #
 #    # ###### #      #  #   #    # #####
 #    # #    # #    # #   #  #    # #
 #####  #    #  ####  #    #  ####  #



+ f backup
backup photos & videos to freebox hdd
  clear
  sudo mount -t cifs //mafreebox.freebox.fr/Server\ Freebox/  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntl,vers=1.0
  mkdir /media/freebox/photos /media/freebox/videos
  rsync --archive --no-o --no-g --delete --info=progress2 "/media/hdd/photos/Google Photos" /media/freebox/photos
  #rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/videos/ /media/freebox/videos

+ f backup
backup photos & videos to freebox ext hdd
  clear
  sudo mount -t cifs //mafreebox.freebox.fr/Backup  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntlm,vers=1.0
  mkdir /media/freebox/Photos /media/freebox/Videos
  rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/photos/ /media/freebox/photos
  #rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/videos/ /media/freebox/Videos

+ f backup
restore photos & videos from freebox ext hdd
  clear
  sudo mount -t cifs //mafreebox.freebox.fr/Backup  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntlm,vers=1.0
  #mkdir /media/freebox/Photos /media/freebox/Videos
  rsync --archive --no-o --no-g --delete --info=progress2 /media/freebox/photos/ /media/hdd/photos
  #rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/videos/ /media/freebox/Videos

+ f backup
restore photos & videos from freebox hdd
  clear
  sudo mount -t cifs //mafreebox.freebox.fr/Server\ Freebox/  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntl,vers=1.0
  #mkdir /media/freebox/Photos /media/freebox/Videos
  rsync --archive --no-o --no-g --delete --info=progress2 /media/freebox/photos/ /media/hdd/photos
  #rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/videos/ /media/freebox/Videos

+ f backup
Backup Raspberry Pi to Rpi3Dev
  clear
  rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/photos/ dev@192.168.0.200:/media/hdd/photos

+ f backup
Backup Windows to Raspberry Pi
  clear
  rsync --archive --no-o --no-g --delete --info=progress2 --rsh="sshpass -p raspberry ssh -o StrictHostKeyChecking=no" /media/sf_win/private/photos/ pi@192.168.0.1:/media/hdd/photos

+ f backup
Backup Raspberry Pi to Windows
  clear
  rsync --archive --no-o --no-g --delete --info=progress2 --rsh="sshpass -p raspberry ssh -o StrictHostKeyChecking=no" pi@192.168.0.1:/media/hdd/photos/ /media/sf_win/private/photos



  ####  #   #  ####  ##### ###### #    #
 #       # #  #        #   #      ##  ##
  ####    #    ####    #   #####  # ## #
      #   #        #   #   #      #    #
 #    #   #   #    #   #   #      #    #
  ####    #    ####    #   ###### #    #

+ f system
reboot
  sudo reboot

+ f system
shutdown
  sudo halt

+ f system
update
  sudo apt-get -y autoremove
  sudo apt-get -y update
  sudo apt-get -y dist-upgrade
  sudo apt-get -y upgrade
  sudo rpi-update

+ f system
mount ntfs usbkey 
  clear ; sudo mount -t ntfs-3g `ls /dev/disk/by-id/usb*-part1` /media/usbkey

+ f system
mount-cardreader
  clear ; sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader

+ f system
mount-hdd
  clear ; sudo mount /dev/sdb1 /media/hdd

+ f system
mount-freebox
  clear ; sudo mount -t cifs //mafreebox.freebox.fr/Server\ Freebox/  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntlm,vers=1.0

+ f system
mount-iphone
  clear ; usbmuxd
  sudo umount /media/iphone
  idevicepair pair
  sudo ifuse /media/iphone

+ f system
format hdd drive
  #Attention lignes suivantes pour formatter
  #sudo mkfs.ext4 /dev/sda1 -L RaspberryPi
  #sudo e2label /dev/sda1 RaspberryPi
  #sudo chown -R pi:pi /media/hdd

+ f system
create fstab file
  clear
  echo 'LABEL="RaspberryPi" /media/hdd ext4 noatime 0 2' | sudo tee -a /etc/fstab
  echo '//mafreebox.freebox.fr/Server\ Freebox/ /media/freebox cifs _netdev,rw,user=freebox,password=Freebox4K,iocharset=utf8,uid=1000,sec=ntlm,file_mode=0777,dir_mode=0777 0 0' | sudo tee -a /etc/fstab
  sudo chown -R pi:pi /media/hdd

+ f system
create new raspbian image
  . ~/config.ini ; clear
  #Use lsblk to check /dev/sdc
  rm /media/hdd/raspbian.zip
  curl --progress-bar -L -o /media/hdd/raspbian.zip https://downloads.raspberrypi.org/raspbian_lite_latest
  #curl --progress-bar -L -o /media/hdd/raspbian.zip https://downloads.raspberrypi.org/raspbian_latest
  #unzip -p raspbian.zip | sudo dd of=/dev/sdb bs=4M status=progress conv=fsync
  unzip -p /media/hdd/raspbian.zip | sudo dd of=/dev/sdc bs=4M conv=fsync
  sudo mkdir /media/cardreader
  sudo mount /dev/sdc1 /media/cardreader
  sudo touch /media/cardreader/ssh
  sudo umount /media/cardreader
  ifttt "New Raspbian Image Created"

 ###### # #      ######  ####
 #      # #      #      #
 #####  # #      #####   ####
 #      # #      #           #
 #      # #      #      #    #
 #      # ###### ######  ####

+ t t
ez Copy
  clear ; DIR=%D ; set %t
  for FILE in "$@"; do
    echo "Copy : $FILE to $DIR"
    rsync --archive --no-o --no-g --info=progress2 "$FILE" "$DIR"
  done

+ t t
ez Move
  clear ; DIR=%D ; set %t
  for FILE in "$@"; do
    echo "Move : $FILE to $DIR"
    rsync --archive --no-o --no-g --info=progress2 --remove-sent-files "$FILE" "$DIR"
  done

+ F files * & t t
Delete
  clear ; set %t
  while [ -n "$1" ] ; do
    rm -rf "$1" ; shift
  done

+ T photos & d & t t
Upload Google Photos
  #Note : you need to create at least an album before starting upload, this script is in incapacity to create the first one.
  . ~/config.ini ; clear
  set %t
  find "$@" -maxdepth 1 -iname "????-??-?? *" -type d | sort | while read DIR ; do
  Album=$(echo "$DIR" | cut -d ' ' -f 2-)
  Year=$(echo "$DIR" | rev | cut -d '/' -f 1 | rev | cut -d '-' -f  1)
  echo ; echo "$Album ($Year)"
  cd "$DIR"
  #if ! upload-gphotos `ls` -u "$user_1" -p "$pwd_1" -a "$Album ($Year)" < /dev/null ; then
  if ! upload-gphotos `ls` -u "$user_2" -p "$pwd_2" -a "$Album ($Year)" < /dev/null ; then
  #if ! upload-gphotos `ls` -u "$user_3" -p "$pwd_3" -a "$Album ($Year)" < /dev/null ; then
  #if ! upload-gphotos `ls` -u "$user_4" -p "$pwd_4" -a "$Album ($Year)" < /dev/null ; then
   echo "$DIR *** $Album ($Year)" >> ~/gphotos.log
  fi
  cd %d
  done
  ifttt "Google Photos Script Finished" "$@"
  mcedit -x ~/gphotos.log

+ F files & t t
upload to transfer.sh
  clear ; set %t
  curl -H "Max-Downloads: 1" -H "Max-Days: 1" --progress-bar --upload-file "$1" "https://transfer.sh/$1" > /tmp/transfer; tail -1 /tmp/transfer
  read -r

+ f files
download from transfer.sh
  cd %d ; url=%{transfer.sh url}
  f=$(echo "$url" | rev | cut -d '/' -f 1 | rev)
  curl --progress-bar -o $f $url

+ F files & t t
download only for google cloud shell
  clear ; set %t
  for FILE in "$@"; do
    cloudshell dl "$FILE"
  done

+ F files & t t
upload to dropbox
  clear ; cd %d ; set %t
  for FILE in "$@"; do
    dropbox_uploader upload "$FILE" "$FILE"
  done

+ f files
download from dropbox
  param = %{Dropbox Filename}
  clear ; cd %d
  dropbox_uploader download "$param"

+ f files
download from google drive
  param = %{Google Drive Filename}
  clear ; cd "/media/hdd/Drive"
  if ! drive pull --no-prompt "$param" ; then ifttt "ERROR Google pull files" "ERROR PULL DRIVE"; return; fi

+ F files & t t
move to "Freebox Server"
 sudo mount -t cifs //mafreebox.freebox.fr/Server\ Freebox/  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntlm,vers=1.0
 clear ; cd %d ; set %t
 for FILE in "$@"; do
   echo "Copy : $FILE"
   rsync --archive --no-o --no-g --info=progress2 --remove-sent-files "$FILE" "/media/freebox"
 done

+ F files & t t
upload to Gdrive
  cd /media/hdd/Drive
  #drive pull --no-prompt "Raspberry Pi/"
  clear ; cd %d ; set %t
  for FILE in "$@"; do
    cp "$FILE" "/media/hdd/Drive/Raspberry Pi/"
  done
  cd /media/hdd/Drive
  if ! drive pull --no-prompt "Raspberry Pi/" ; then ifttt "ERROR Google push files" "ERROR PUSH DRIVE"; return; fi


 # #    # #####   ####  #####  #####
 # ##  ## #    # #    # #    #   #
 # # ## # #    # #    # #    #   #
 # #    # #####  #    # #####    #
 # #    # #      #    # #   #    #
 # #    # #       ####  #    #   #

 # ls -l /dev/disk/by-id

+ f import
import videos & merge & upload to youtube
  clear ; source ~/config.ini
  rm /media/hdd/youtube-upload/*
  sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader
  cp -v /media/cardreader/DCIM/???_PANA/*.MP4 /media/hdd/youtube-upload
  sudo umount /media/cardreader
  ifttt "Import done" "You can remove SD card reader"
  cd /media/hdd/youtube-upload
  FILES=`find *.MP4 -type f -printf "%%f + " | sort`
  mkvmerge -o out.mkv $FILES
  youtube-upload --title="-" --privacy="private" out.mkv
  ifttt "Backup done" "Merge & uploaded to youtube"
  sleep 30m
  ifttt "Youtube done" "Can watch to youtube"

+ f import
import gopro
  ID="/dev/disk/by-id/usb-GoPro_Storage_*-0:0-part1"
  sudo mount $ID /media/gopro
  mkdir /media/hdd/gopro /media/hdd/gopro/photos /media/hdd/gopro/videos
  cp -v /media/gopro/DCIM/???GOPRO/*.JPG /media/hdd/gopro/photos
  cp -v /media/gopro/DCIM/???GOPRO/*.MP4 /media/hdd/gopro/videos
  ifttt "photos and videos from gopro are saved"
  rm /tmp/copy-gopro
  sudo umount /media/gopro

+ f import
import iphone videos
  usbmuxd
  VIDEOS="/media/hdd/youtube-upload"
  sudo umount /media/iphone
  echo "Please connect iphone, accept the connection and enter password"
  read -e -p "Press any key to continue..." key
  idevicepair pair
  sudo ifuse /media/iphone
  sudo rsync --include '*/' --include '*.MOV' --exclude '*' --archive --info=progress2 /media/iphone/DCIM/100APPLE/ $VIDEOS
  sudo chown -R pi:pi $VIDEOS
  youtube_upload

+ f import
import usbkey
  ID="/dev/disk/by-id/usb-Kingston_DataTraveler_3.0_*-0:0-part1"
  VIDEOS="/media/hdd/youtube-upload"
  sudo mkdir /media/usbkey
  sudo mount $ID /media/usbkey
  rsync --archive --info=progress2 /media/usbkey/ $VIDEOS
  sudo umount /media/usbkey

+ f import
import All Photos
  clear
  LOGFILE="/home/pi/log.txt"
  PHOTOS="/media/hdd/photos/TEMP"
  ## SD Card
  DEVICE="/dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1"
  sudo mount `ls $DEVICE` /media/cardreader
  if [ -d /media/cardreader/DCIM ]; then
  find /media/cardreader/DCIM/???_PANA -iname "*.JPG" -type f | while read FILE ; do
  cp -v "$FILE" "$PHOTOS/$(basename "$FILE")"
  done
  sudo umount /media/cardreader
  fi
  ## Dropbox
  rm -rf "$PHOTOS/Camera Uploads"
  dropbox_uploader download "Camera Uploads" $PHOTOS
  mv "$PHOTOS/Camera Uploads" $PHOTOS/Camera
  mv $PHOTOS/Camera/*.jpg $PHOTOS
  rm -rf $PHOTOS/Camera
  #
  find "$PHOTOS" -iname "*.JPG" -type f | while read FILE ; do
  #Add things to do for each file
   exiv2 -M "del Exif.Image.DateTime" "$FILE"
   exiv2 -M "del Exif.Photo.ImageUniqueID" "$FILE"
  EXIF=$(exiv2 -g DateTimeOriginal -PEv "$FILE")
  echo "EXIF : $EXIF"
  if [ ! -z "$EXIF" ]; then
  DATE=$(echo $EXIF | cut -d ' ' -f 1 | tr -d ':')
  TIME=$(echo $EXIF | cut -d ' ' -f 2 | tr -d ':')
  NEWFILE=${DATE}T${TIME}
  echo "$(basename "$FILE") <<-->> $NEWFILE.JPG"
  if [ $(basename "$FILE" | cut -d . -f1) != $NEWFILE ] ; then
  FOUND=$(find $PHOTOS -name "$NEWFILE.JPG" -type f | wc -l)
    while [[ $FOUND -gt 0 ]]; do
     echo "Warning: $NEWFILE.JPG found $FOUND time(s)!"
     DATE="${NEWFILE:0:4}-${NEWFILE:4:2}-${NEWFILE:6:2} ${NEWFILE:9:2}:${NEWFILE:11:2}:${NEWFILE:13:2}"
     SECS=$(date +%%s -d "$DATE")
     SECS=$(( $SECS + 1 ))
     NEWFILE=$(date +%%Y%%m%%dT%%H%%M%%S -d @$SECS)
     FOUND=$(find $1 -name "$NEWFILE.JPG" -type f | wc -l)
    done
    echo "$(basename "$FILE")=>$NEWFILE.JPG"
    NEWDATE="${NEWFILE:0:4}:${NEWFILE:4:2}:${NEWFILE:6:2} ${NEWFILE:9:2}:${NEWFILE:11:2}:${NEWFILE:13:2}"
    exiv2 -M "set Exif.Photo.DateTimeOriginal $NEWDATE" "$FILE"
    EXIF=$(exiv2 -g DateTimeOriginal -PEv "$FILE")
    if [ "$NEWDATE" != "$EXIF" ] ; then
    echo "EXIF FAIL TO WRITE: $NEWDATE $EXIF $FILE" >> $LOGFILE
    fi
    TCH="$(echo $EXIF | tr -d ':' | tr -d ' ')"
    touch -t ${TCH:0:12}.${TCH:12:2} "$FILE" #[[SS]AA]MMJJhhmm[.ss]]
    mv "$FILE" "$(dirname "$FILE")/$NEWFILE.JPG"
  fi
  #
  if [ ! -d "$PHOTOS/$DATE" ] ; then 
    mkdir "$PHOTOS/$DATE";
    echo "create dir $PHOTOS/$DATE"
    touch -t "$(echo ${DATE} | tr -d -)0000.00" "$PHOTOS/$DATE"
    echo "touch"
  fi
  mv -n "$FILE" "$PHOTOS/$DATE/$NEWFILE.JPG"
  fi
  #rm -rf "$PHOTOS/Camera Uploads"
  echo
  done
  if [ -f $DEVICE ] ; then
  sudo umount /media/cardreader
  fi
  cd $PHOTOS
  #python -m SimpleHTTPServer 8080
  read -r

 #    # #    #  ####  #  ####
 ##  ## #    # #      # #    #
 # ## # #    #  ####  # #
 #    # #    #      # # #
 #    # #    # #    # # #    #
 #    #  ####   ####  #  ####

+ f music
sst
  clear
  wget -O - "http://hi5.streamingsoundtracks.com" | castnow --quiet -

+ f music
sst stop
  tmux send-keys -t pi:sst C-c

+ F music & t t
castnow
  clear
  echo %t
  castnow %t

+ F music & t t
upload to gmusic
  account=%{account number}
  clear ; cd %d ; set %t
  for d in "$@"; do gms upload -u $account "$d"; done
  ifttt "Rasperry Pi" "gmusic upload done"

+ F music & t t
download from gmusic
  account=%{Give account number}
  gms download -u $account "/media/hdd/music/%album%/%title%"
  ifttt "Rasperry Pi" "gmusic download done"

+ f *.wav & F music & t t
wav to mp3
  clear ; cd %d ; set %t
  for d in "$@"; do lame --preset extreme -q 0 -h "$1" "$1.mp3"; done

+ f *.mp3 & F music & t t
concat mp3
  #sudo apt-get install mp3wrap
  clear ; cd %d ; set %t
  mp3wrap output.mp3 $@;

+ f *.flac & F music & t t
flac to mp3
  clear ; cd %d ; set %t
  for f in "$@"; do
    album="$(metaflac --show-tag=album "$f" | sed 's/[^=]*=//')"
    artist="$(metaflac --show-tag=artist "$f" | sed 's/[^=]*=//')"
    date="$(metaflac --show-tag=date "$f" | sed 's/[^=]*=//')"
    title="$(metaflac --show-tag=title "$f" | sed 's/[^=]*=//')"
    year="$(metaflac --show-tag=date "$f" | sed 's/[^=]*=//')"
    genre="$(metaflac --show-tag=genre "$f" | sed 's/[^=]*=//')"
    tracknumber="$(metaflac --show-tag=tracknumber "$f" | sed 's/[^=]*=//')"
    flac --decode --stdout "$f" | lame --preset extreme --add-id3v2 --tt "$title" --ta "$artist" --tl "$album" --ty "$year" --tn "$tracknumber" --tg "$genre" - "${f%.flac}.mp3"
  done


 #####  #    #  ####  #####  ####   ####
 #    # #    # #    #   #   #    # #
 #    # ###### #    #   #   #    #  ####
 #####  #    # #    #   #   #    #      #
 #      #    # #    #   #   #    # #    #
 #      #    #  ####    #    ####   ####

+ f photos
Take Raspberry Pi Photo
  tput cup 0 0 ; clear
  raspistill -v -rot 180 -o /media/hdd/photo.jpg
  source ~/config.ini
  #curl -s -X POST https://api.telegram.org/bot$apiToken/sendPhoto -d photo="/media/hdd/photo.jpg" -d chat_id=$userChatId
  #curl -s -X POST https://api.telegram.org/bot$apiToken/sendPhoto -d photo="/media/hdd/photo.jpg" -d chat_id=@MyChannel
  dropbox_uploader upload /media/hdd/photo.jpg /Camera/$(date +"%%Y%%m%%dT%%H%%M%%S").JPG
  rm /media/hdd/photo.jpg

+ f photos
Found double photos
  sudo apt-get -y install fslint
  /usr/share/fslint/fslint/fslint /media/hdd/photos > photos_double.txt
  fdupes -Sr /media/hdd/photos > ~/photos_double2.txt
  ifttt "Search double Photos" "Finish"

+ t photos
(1) Pull Photos from Gdrive
  rm /tmp/exif.log
  GDRIVE=/media/hdd/drive; cd $GDRIVE
  PHOTOS="$GDRIVE/Google Photos"
  #PHOTOS="/media/hdd/photos"
  if ! drive pull --no-prompt "Google Photos" ; then ifttt "Rasperry Pi - Import Google Photos" "ERROR PULL DRIVE"; return; fi
  ##Move only files under month directory (??) to ..
  #find "$PHOTOS" -iname "??" -type d -print0 | xargs -0 -I{.} find {.} -iname "*.jpg" iname "*.jpeg" -type f | while read FILE ; do
  #mv -v "$FILE" "$PHOTOS/$(basename "$FILE")"
  #done;
  ## Delele empty folders
  #find "$PHOTOS" -type d -empty -delete
  ## Move files from .. to YYYY/YYYY-MM-DD folder
  #find "$PHOTOS" -maxdepth 1 -iname "*.jpg" -type f | while read FILE ; do
  #EXIF=`exiv2 "$FILE" 2> /tmp/null | grep "Image timestamp" | cut -d ' ' -f 4 | tr ':' '-'`
  #YEAR=`echo "$EXIF" | cut -d '-' -f 1`
  #if [ ! -d "$PHOTOS/$YEAR" ]; then mkdir "$PHOTOS/$YEAR"; fi
  #if [ ! -d "$PHOTOS/$YEAR/$EXIF" ]; then mkdir "$PHOTOS/$YEAR/$EXIF"; fi
  #mv -v "$FILE" "$PHOTOS/$YEAR/$EXIF/$(basename "$FILE")"
  #done

+ T photos & d & t t
Photos Validation & Rename [t YYYY]
  #Need to select every year
  tput cup 0 0 ; clear
  clear ; cd %d; set %t
  for f in "$@"; do
  echo "$(tput setaf 6)[$1]" >> ~/exif.log
  #Delete no JPEG Files
  find "$1" ! -iname "*.jpg" ! -iname "*.jpeg" -type f | while read FILE ; do rm "$FILE" ; done
  #Delete Empty Directories
  find "$1" -type d -empty -delete
  #Next
  find "$1" -iname "*.jpg" -o -iname "*.jpeg" -type f | sort | while read FILE ; do
  EXIF=$(exiv2 -g DateTimeOriginal -PEv "$FILE")
  # If not EXIF give one with folder name/date
  if [ -z "$EXIF" ]; then
   NEWDATE=`echo "$(dirname "$FILE")" | rev | cut -d '/' -f 1 | rev | cut -d ' ' -f  1 | tr '-' ':'`
   exiv2 -M "set Exif.Photo.DateTimeOriginal $NEWDATE 00:00:00" "$FILE"
  fi
  # Tests if jpg files are in the correct folder and ask for modify
  IMG_DATE=`echo "$EXIF" | cut -d ' ' -f 1 | tr ':' '-'`
  IMG_YYMM=`echo "$IMG_DATE" | cut -d '-' -f 1,2 | tr '-' ' '`
  IMG_YYMM_LAST=`date -d "$IMG_DATE -1 month" "+%%Y %%m"`
  IMG_YYMM_NEXT=`date -d "$IMG_DATE +1 month" "+%%Y %%m"`
  DIR_YYMM=`echo "$(dirname "$FILE")" | rev | cut -d '/' -f 1 | rev | cut -d ' ' -f  1 | cut -d '-' -f 1,2 | tr '-' ' '`
  echo "$(tput setaf 2)$FILE $(tput setaf 7)$EXIF $IMG_YYMM <=> $DIR_YYMM"
  if [ "$DIR_YYMM" != "$IMG_YYMM" ] && [ "$DIR_YYMM" != "$IMG_YYMM_LAST" ] && [ "$DIR_YYMM" != "$IMG_YYMM_NEXT" ]; then
     NEWEXIF="`echo "$(dirname "$FILE")" | rev | cut -d '/' -f 1 | rev | cut -d ' ' -f  1 | cut -d '-' -f 1,2,3 | tr '-' ':'` 00:00:00"
     echo "$(tput setaf 1)EXIF ERROR : $(tput setaf 7)$FILE"
     read -e -p "$(tput setaf 2)EXIF : $(tput setaf 7)" -i "$NEWEXIF" READNEWEXIF </dev/tty
     exiv2 -q -M "set Exif.Photo.DateTimeOriginal $NEWEXIF" "$FILE"
  fi
  # Test if photo not too big
  IFS=- read X Y <<< $(identify -format "%w-%h" "$FILE")
  if [ $(( $X * $Y )) -gt 100000000 ] ; then
    echo "$(tput setaf 1)PIXEL ERROR : $(tput setaf 7)$FILE"
    break
  fi
  done
  shift
  done
  #Rename jpg files as YYmmddTHHMMSS.JPG
  for f in "$@"; do
   echo "$(tput setaf 6)[$1]"
   find "$1" -iname "*.JPG" -o -iname "*.JPEG" -type f | sort | while read FILE ; do
   exiv2 -M "del Exif.Image.DateTime" "$FILE"
   exiv2 -M "del Exif.Photo.ImageUniqueID" "$FILE"
   EXIF=$(exiv2 -g DateTimeOriginal -PEv "$FILE")
   echo $EXIF
   DATE=$(echo $EXIF | cut -d ' ' -f 1 | tr -d ':')
   TIME=$(echo $EXIF | cut -d ' ' -f 2 | tr -d ':')
   NEWFILE=${DATE}T${TIME}
   OLDFILE=$(echo $(basename "$FILE") | cut -d . -f1)
   echo "$(tput setaf 7)$OLDFILE <=> $NEWFILE"
   if [ "$OLDFILE" != "$NEWFILE" ] ; then
    FOUND=$(find $1 -name "$NEWFILE.JPG" -type f | wc -l)
    while [[ $FOUND -gt 0 ]]; do
     echo "$(tput setaf 1)$NEWFILE.JPG found $FOUND time(s)!"
     DATE="${NEWFILE:0:4}-${NEWFILE:4:2}-${NEWFILE:6:2} ${NEWFILE:9:2}:${NEWFILE:11:2}:${NEWFILE:13:2}"
     SECS=$(date +%%s -d "$DATE")
     SECS=$(( $SECS + 1 ))
     NEWFILE=$(date +%%Y%%m%%dT%%H%%M%%S -d @$SECS)
     FOUND=$(find $1 -name "$NEWFILE.JPG" -type f | wc -l)
    done
    echo "$(tput setaf 2)$OLDFILE => $NEWFILE"
    NEWDATE="${NEWFILE:0:4}:${NEWFILE:4:2}:${NEWFILE:6:2} ${NEWFILE:9:2}:${NEWFILE:11:2}:${NEWFILE:13:2}"
    exiv2 -M "set Exif.Photo.DateTimeOriginal $NEWDATE" "$FILE"
    EXIF=$(exiv2 -g DateTimeOriginal -PEv "$FILE")
    if [ "$NEWDATE" != "$EXIF" ] ; then
    echo "$(tput setaf 1)EXIF FAIL TO WRITE: $NEWDATE $EXIF_CONTROL $FILE" >> ~/exif.log
    fi
    TCH="$(echo $EXIF | tr -d ':' | tr -d ' ')"
    touch -t ${TCH:0:12}.${TCH:12:2} "$FILE" #[[SS]AA]MMJJhhmm[.ss]]
    mv "$FILE" "$(dirname "$FILE")/$NEWFILE.JPG"
   fi
   done
   #Loop through directories and change directory creating date
   find "$1" -type d | while read DIR ; do
   DAT=`echo "$DIR" | rev | cut -d '/' -f 1 | rev | cut -d ' ' -f  1 | tr -d '-'`
   echo "$DIR -- $DAT"
   if [ ${#DAT} == 4 ]; then DAT=`echo "${DAT}0101"` ; fi
   touch -t "${DAT}0000.00" "$DIR"
   done
  shift
  done

+ f photos
Add Exif Description (please toggle [????] dir) (7)
  clear ; cd %D; set %T
  for f in "$@"; do
  echo "$1"
   find "$1" -iname "*.jpg" -o -iname "*.jpeg" -type f | sort | while read FILE ; do
   #find "$@" -maxdepth 1 -iname "????-??-?? *" -type d | sort | while read DIR ; do
  Album=$(echo $(dirname "$FILE") | cut -d ' ' -f 2-)
  Year=$(echo $(dirname "$FILE") | rev | cut -d '/' -f 1 | rev | cut -d '-' -f  1)
  echo "$Album ($Year)"
  exiv2 -M "set Exif.Image.ImageDescription $Album ($Year)" "$FILE"
   #echo "$(dirname "$FILE")"
   done
  shift
  done

+ f *.png | f *.PNG & t t
convert PNG to JPG
  set %t
  while [ -n "$1" ]; do
    convert $1 $1.JPG
    shift
  done

+ f *.jpg | f *.JPG | f * .jpeg | f *.JPEG & t t
Autolevel photos
  clear ; set %t
  while [ -n "$1" ]; do
    mogrify -auto-level $1
    shift
  done

+ f *.jpg | f *.JPG | f * .jpeg | f *.JPEG & t t
resize photo
  # Change newX when newY = (newX * oldY) / oldX and (newX * newY) < 100000000
  clear ; set %t ; resize=%{Enter resize newX newY }
  ~/node_modules/.bin/sharp -i $1 -o $1-sharp.jpg resize $resize --withoutEnlargement

+ f *.jpg | f *.JPG | f * .jpeg | f *.JPEG & t t
Affiche EXIF de la photo
  clear
  exiv2 -pv %f
  echo
  X=`exiv2 -g PixelXDimension -Pv %f`
  Y=`exiv2 -g PixelYDimension -Pv %f`
  R="$((X * Y))"
  echo $R
  D=`exiv2 -g DateTimeOriginal -PEv %f | cut -d ' ' -f 2`
  echo "$D"
  printf 'Press [Enter] key to continue...'

+ f *.jpg | f *.JPG | f * .jpeg | f *.JPEG & t t
Delete DateTimeOriginal EXIF from pics
  set %t
  while [ -n "$1" ]; do
    exiv2 -q -M "del Exif.Photo.DateTimeOriginal" "$1"
    shift
  done

+ f *.jpg | f *.JPG | f * .jpeg | f *.JPEG & t t
Delete DateTime EXIF from pics
  set %t
  while [ -n "$1" ]; do
    exiv2 -q -M "del Exif.Image.DateTime" "$1"
    shift
  done

+ f *.jpg | f *.JPG | f * .jpeg | f *.JPEG & t t
Change Photo EXIF
  clear ; set %t
  exiv2 -g DateTimeOriginal -PEv "$1" > /tmp/exif.txt
  mcedit -x /tmp/exif.txt
  exiv2 -q -M "set Exif.Photo.DateTimeOriginal `head -n 1 /tmp/exif.txt`" "$1"
  rm /tmp/exif.txt

+ f photos
Photos server on 192.168.0.1:8080
  cd /media/hdd/photos
  python -m SimpleHTTPServer 8080


 #    # # #####  ######  ####   ####
 #    # # #    # #      #    # #
 #    # # #    # #####  #    #  ####
 #    # # #    # #      #    #      #
  #  #  # #    # #      #    # #    #
   ##   # #####  ######  ####   ####

+ F videos & f *.avi | f *.AVI | f *.mkv | f *.MKV | f *.mp4 | f *.MP4 & t t
vlc upload (iphone)
  clear ; cd %d ; set %t
  for FILE in "$@"; do
   echo "Upload to VLC : $FILE"
   curl -# -F file=@"$FILE" http://192.168.0.50/upload.json
   echo
  done

+ F videos & f *.avi | f *.AVI | f *.mkv | f *.MKV | f *.mp4 | f *.MP4 & t t
vlc upload (ipad)
  clear ; cd %d ; set %t
  for FILE in "$@"; do
   echo "Upload to VLC : $FILE"
   curl -# -F file=@"$FILE" http://192.168.0.51/upload.json
   echo
  done

+ f videos
tv-dl
  mcedit -x /media/hdd/tmp/youtube.txt
  clear ; source ~/config.ini; cd /media/hdd/youtube-dl
  while IFS=, read url out ; do
    if [[ $url == h* ]]; then
    if [[ $out == "" ]]; then youtube-dl --fixup warn $url; else
    youtube-dl --fixup warn -o "$out" $url; fi
    #--fixup warn --download-archive ~/.mydownloads --hls-prefer-native
    fi
  done < /media/hdd/tmp/youtube.txt
  ifttt "Youtube-dl" "tv-dl done"

tv-dl v2
  mcedit -x /media/hdd/tmp/youtube.txt
  clear ; source ~/config.ini; cd /media/hdd/youtube-dl
  while IFS=, read url out ; do
    if [[ $url == h* ]]; then
    if [[ $out == "" ]]; then while ! youtube-dl -c --fixup warn --socket-timeout 5 $url; do sleep 10; done; else
    while ! youtube-dl -c --fixup warn --socket-timeout 5 -o "$out" $url; do sleep 10; done
    fi
  done < /media/hdd/tmp/youtube.txt
  ifttt "Youtube-dl" "tv-dl done"

+ f videos
yt-dl-playlist
  clear ; source ~/config.ini
  if [ ! -d /media/hdd/youtube-dl ] ; then mkdir /media/hdd/youtube-dl ; fi
  youtube-dl --limit-rate 200K --ignore-errors --format 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' \
  --merge-output-format mp4 --output "/media/hdd/youtube/%%(title)s.%%(ext)s" https://www.youtube.com/playlist?list=$Playlist
  ifttt "Youtube-dl" "dl playlist done"

+ f *.mp4 | f *.MP4 & F videos & t t
conv mp4 to aac
  set %t
  aac="$(basename "$1" | cut -d . -f1).aac"
  avconv -loglevel panic -i "$1" -c copy -map 0:a:0 "$aac"

+ f *.mp4 | f *.MP4 & F videos & t t
mux mp4 and aac to mkv
  set %t
  aac="$(basename "$1" | cut -d. -f1).aac"
  mkv="$(basename "$1" | cut -d. -f1).mkv"
  MP4Box -add "$1" -add "$aac" "$mkv"

+ f *.avi | f *.AVI | f *.mkv | f *.mov | f *.MOV | f *.mp4 | f *.MP4 | f *.mts | f *.webm | f *.wmv & F videos & t t
upload to youtube
  clear ; source ~/config.ini ; cd %d ; set %t
  for FILE in "$@"; do
    #while ! youtube-upload --title="$FILE" --category="Entertainment" --privacy="private" \
    youtube-upload --title="$FILE" --category="Entertainment" --privacy="private" \
    --client-secrets="/home/pi/.youtube-upload/youtube-upload-client-secret.json" \
    --credentials-file="/home/pi/.youtube-upload/youtube-upload-credentials-1.json" \
    "$FILE"
    #"$FILE" ; do :; done
  done
  ifttt "Youtube Upload" "done"

+ f *.mts | f *.MTS | f *.mov | f *.MOV | f *.avi | f *.AVI | f *.mp4 | f *.MP4 | f *.webm & F videos & t t
merge mkv
  clear ; cd %d ; set %t
  FILES="$1"; shift
  for FILE in "$@"; do
    FILES="$FILES + $FILE"
  done
  mkvmerge -o out.mkv $FILES

+ f *.mp4 | f *.MP4 & F videos & t t
merge mp4
  clear ; cd %d ; set %t
  #FILES="-cat $1" ; shift
  FILES="-force-cat -add $1" ; shift
  for FILE in "$@"; do
    FILES="$FILES -cat $FILE"
  done
  echo "$FILES"
  MP4Box $FILES -new merged.mp4

+ f *.mp4 | f *.MP4 & F videos & t t
extract mp4 video without sound
  clear ; cd %d ; set %t
  #Never tested
  for FILE in "$@"; do
    mkvextract tracks out.mkv 0:$1.mp4
    shift
  done

+ f *.mp4 | f *.MP4 & F videos & t t
rotate 90 mp4
  clear ; cd %d ; set %t
  for FILE in "$@"; do
    avconv -i "$FILE" -vf transpose=1 -strict experimental "Rotate-$FILE"
  done

+ f *.mov | f *.MOV | f *.avi | f *.AVI | f *.mp4 | f *.MP4 & F videos & t t
cut video
  clear
  read -e -p "Start : " -i "00:00:00" start
  read -e -p "Stop  : " -i "00:00:00" stop
  echo "Please Wait..."
  mpv -ss $start -endpos $stop -really-quiet -ovc copy -oac pcm %f -o %b-CUT.%x
  ifttt "Rasperry Pi" "La vidéos %d.avi est coupée"

+ f videos
create stopmotion
  clear ; source ~/config.ini
  # - 720p (1280×720)
  # – 1080p (1920×1080) full HD
  # – 1440p (2560×1440) 2K
  # – 2160p (3840×2160) 4K
  # – 4320p (7680×4320) 8K
  ###GoPro 2592x1944 => 1440p(2K):2560x1440
  ###DMC TZ40 ????x???? => 1440p(2K):2560x1440
  #CUT="2560x1440+16+0" #Top
  CUT="2560x1440+16+252" #Center
  #CUT="2560x1440+16+504" #Bas
  ###Sony 4000x3000 => 2160p(4K):3840x2160
  #CUT="3840x2160+80+0" #Top
  #CUT="3840x2160+80+420" #Center
  #CUT="3840x2160+80+840" #Bas
  cd /media/hdd/stopmotion
  mkdir CROP
  for img in *.JPG; do
  echo "Convert $img"
  #convert "$img" -crop $CUT "CROP/$img-CROP.JPG"
  #convert -rotate "90" "$img" "CROP/$img-CROP.JPG"
  done
  ls -1 CROP/*-CROP.JPG >  files.lst
  mpv mf://@files.lst -mf-type=jpg -mf-fps=7.5 -ovc=rawvideo -no-audio -o stopmotion.avi
  youtube-upload --title="Stopmotion" --category="Entertainment" --privacy="private" stopmotion.avi
  ifttt "Raspberry Pi" "Stopmotion created"

+ f videos
download youtube playlist and merge with external music
  youtube-dl -k https://www.youtube.com/playlist?list=1234567890
  #Be careful first add next cat
  FILES="-force-cat -add 1.mp4 -cat 2.mp4 -cat 3.mp4 (...)"
  MP4Box $FILES -new merged.mp4
  mkvmerge -o output-with-sound.mkv -A input-video.mkv soundfile.mp3


 ##### #    # #    # #    #
   #   ##  ## #    #  #  #
   #   # ## # #    #   ##
   #   #    # #    #   ##
   #   #    # #    #  #  #
   #   #    #  ####  #    #

+ f tmux
switch to tmux background
  tmux switch-client -t bg
  tmux send -t bg:1 'tmux send -t pi:1 F2' ENTER
  tmux send -t bg:1 'tmux switch-client -t pi'

+ f tmux
create tmux window
  tmux new-window -n "●"
  session=`tmux display-message -p '#I'`
  tmux set pane-border-format " $session "
  tmux send -t $session '. ~/mcui/functions' ENTER
  tmux send -t $session '/usr/bin/mc -x /home/pi/rpi/ /media/hdd/ && clear' ENTER

+ f tmux
tmux last window
  tmux last-window


 #####  ####   ####  #       ####
   #   #    # #    # #      #
   #   #    # #    # #       ####
   #   #    # #    # #           #
   #   #    # #    # #      #    #
   #    ####   ####  ######  ####

+ f tools
Display Temperatures
  clear
  while [ true ] ; do
  cpu0=`cat /sys/class/thermal/thermal_zone0/temp`
  cpu1=$(($cpu0/1000))
  cpu2=$(($cpu0/100))
  cpu=$(($cpu2 % $cpu1))
  gpu=`/opt/vc/bin/vcgencmd measure_temp | cut -d '=' -f 2`
  tput cup 0 0
  echo "$(date) @ $(hostname)"
  echo "───────────────────────────────────────────"
  echo "CPU : $cpu1.$cpu'C"
  echo "GPU : $gpu"
  cat /proc/meminfo | grep Mem
  read -t 3 -n 1
  if [ $? = 0 ] ; then exit ; fi
  done


 #####  ####  #####  #####  ###### #    # #####
   #   #    # #    # #    # #      ##   #   #
   #   #    # #    # #    # #####  # #  #   #
   #   #    # #####  #####  #      #  # #   #
   #   #    # #   #  #   #  #      #   ##   #
   #    ####  #    # #    # ###### #    #   #

+ f torrent
download with aria2c
  rm -rf /media/hdd/drive/Torrents/*
  echo ' ' > ~/aria2-torrents
  cd /media/hdd/drive
  drive pull --quiet Torrents/
  find /media/hdd/drive/Torrents/*.torrent -type f | while read FILE ; do
  echo "$FILE" >> ~/aria2-torrents
  rm "$FILE"
  done
  drive push --quiet Torrents/
  aria2c --max-overall-upload-limit=200K --max-overall-download-limit=2M --input-file=~/aria2-torrents
  done

+ f torrent
stop transmission
  sudo service transmission-daemon stop

+ f torrent
add/remove torrents
  clear
  sudo service transmission-daemon restart
  rm -rf /media/hdd/Drive/Torrents/*
  cd /media/hdd/Drive
  drive pull --quiet Torrents/
  find /media/hdd/Drive/Torrents/*.torrent -type f | while read FILE ; do
  transmission-remote --add "$FILE"
  rm "$FILE"
  done
  drive push --quiet Torrents/
  ##
  LIST=`transmission-remote -l  | grep 100% | cut -d " " -f 4 | cut -d "*" -f 1`
  for ID in $LIST; do
  echo "Torrent #$ID is completed"
  #echo "Moving downloaded file(s) to $MOVEDIR"
  #transmission-remote --torrent $ID --move $MOVEDIR
  echo "Removing torrent from list"
  transmission-remote --torrent $ID --remove
  done

+ f torrent
list torrents
  clear
  while [ true ] ; do
  transmission-remote -l ; tput cup 0 0
  #if transmission-remote -l | grep % | cut -d " " -f 4 | cut -d "*" -f 1 < /dev/null ; then echo "OK" ;fi
  read -t 10 -n 1
  if [ $? = 0 ] ; then exit ; fi
  done


 #####  #####  ######
 #    # #    # #
 #    # #    # #####
 #####  #    # #
 #      #    # #
 #      #####  #

+ f *.jpg | f *.JPG
drive push rpi
  drive push --no-prompt

+ f *.jpg | f *.JPG
drive pull rpi
  drive pull --no-prompt

+ f *.tif | f *.TIF
convert tif to jpeg
  set %t
  while [ -n "$1" ]; do
    ~/node_modules/.bin/sharp -i "$1" -o "$1.jpg" -q 100
    shift
  done

+ f *.pdf | f *.PDF & t t
Uncrypt PDF
  set %t
  while [ -n "$1" ]; do
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$1.uncrypted.pdf" "$1"
    shift
  done

+ f *.pdf | f *.PDF | F *.pdf | F *.PDF
A Drive pull Documents and Snoozed
  clear ; source ~/config.ini
  GDRIVE=/media/hdd/Drive ; cd $GDRIVE
  if ! drive pull --no-prompt -fix-clashes $GDRIVE/Snoozed $GDRIVE/Documents $GDRIVE/Notices ; then ifttt "Merge PDF" "ERROR PULL GDRIVE" ; exit; fi

+ f *.pdf | f *.PDF & t t
B Merge PDF
  #Don't use pdftk files genarated are too big
  clear ; source ~/config.ini ; array=()
  set %T ; for FILE in "$@"; do 
    if grep -r "Encrypt" "%D/$FILE" ; then echo "ERROR : $FILE CRYPTED" ; ifttt "ERROR PDF" "CRYPTED $FILE"; exit; fi 
    array+=("%D/$FILE") ; done
  set %t ; for FILE in "$@"; do 
    if grep -r "Encrypt" "%d/$FILE" ; then echo "ERROR : $FILE CRYPTED" ; ifttt "ERROR PDF" "CRYPTED $FILE"; exit; fi
    array+=("%d/$FILE") ; done
  /opt/sejda/bin/sejda-console merge -f "${array[@]}" -o "$(dirname "${array[-1]}")/!$(basename "${array[-1]}")"
  rm "${array[@]}"

+ f *.pdf | f *.PDF | F *.pdf | F *.PDF
C Drive push Documents and Snoozed
  clear ; source ~/config.ini
  GDRIVE=/media/hdd/Drive ; cd $GDRIVE
  if ! drive push --no-prompt $GDRIVE/Snoozed $GDRIVE/Documents $GDRIVE/Notices ; then iftt "Merge PDF" "ERROR PUSH GDRIVE" ; exit; fi

+ f tools
Import usb key JPG 92pc scanned Files to /media/hdd/djvu
  echo "Please Use SH Flash Disk"
  sudo mount `ls /dev/disk/by-id/usb-Generic_Flash_Disk_*-part1` /media/usbkey
  cp -v /media/usbkey/*.jpg /media/hdd/djvu
  sudo umount /media/usbkey
  echo "You can remove SD card reader"
  cd /media/hdd/djvu
  if ! drive push --no-prompt "/media/hdd/djvu/" ; then ifttt "ERROR Google push files" "ERROR PUSH DRIVE"; return; fi

+ f tools
Automatic Merge pdf files
  ## TODO Delete only files merged
  clear ; source ~/config.ini
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " `date`"
  GDRIVE=/media/hdd/Drive
  FILE=/tmp/gdrive.csv
  ##Init
  cd $GDRIVE
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Download Snoozed Dir"
  rm -rf Snoozed Documents
  if ! drive pull --no-prompt -fix-clashes "Snoozed/"; then ifttt "Auto Merge PDF" "Error pull, please fix clashes in Snoozed folder"; return; fi
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Test if Snoozed Dir Empty"
  if [ `find "Snoozed" -type d -empty` ] ; then tput setaf 2 ; echo -n "[info]" ; tput sgr0 ; echo "  Empty Snoozed Dir"; return; fi
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Test if Snoozed Dir Files Encrypts"
  if grep -r "Encrypt" Snoozed ; then ifttt "`grep -r "Encrypt" Snoozed`"; return; fi
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Download Iftt csv file"
  if ! drive pull --no-prompt --export csv --exports-dir /tmp --same-exports-dir --force ifttt; then ifttt "Auto Merge PDF" "Error pull for ifttt.xls" ; return; fi
  tr -d '\r' < /tmp/ifttt.csv > $FILE
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Read Iftt csv file"
  while IFS=, read email in out ; do
    tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Search $in file..."
    if [[ -n $(find "Snoozed" -name "$in") ]]
        then
        rm ~/files.csv
        tput setaf 2 ; echo -n "[ ok ]" ; tput sgr0 ; echo " find $1"
        find "Snoozed" -name "$in" | sort -r | tr '\n' ',' > ~/files.csv
        cp ~/files.csv ~/files_rm.csv
        echo "Snoozed/$out" >> ~/files.csv
        tput setaf 1 ; echo -n "[FAIL]" ; tput sgr0 ; echo "cat ~/files.csv"
        cat ~/files.csv
        tput setaf 1 ; echo -n "[info]" ; tput sgr0 ; echo " END"
        if ! drive pull --no-prompt "Documents/$out" ; then ifttt "Auto Merge PDF" "Error pull ref doc" ; return; fi
        #mv "Documents/$out" "Snoozed/$out"
        #/opt/sejda/bin/sejda-console merge -l ~/files.csv -o sejda_out.pdf
        #mv sejda_out.pdf "Documents/$out"
        #if ! drive push --no-prompt "Documents/$out" ; then ifttt "Auto Merge PDF" "Error push ref doc" ; return; fi
        while IFS=, read f ; do
        tput setaf 1 ; echo -n "[----]" ; tput sgr0 ; echo " delete $f"
        #rm "$f"
        done < ~/files_rm.csv
    fi
  done < "$FILE"
  rm $FILE
  #if ! drive pull --no-prompt "Snoozed/"; then ifttt "Upload Snoozed" "Error"; return; fi


  ####   ####  #####  # #####  #####  ####
 #      #    # #    # # #    #   #   #
  ####  #      #    # # #    #   #    ####
      # #      #####  # #####    #        #
 #    # #    # #   #  # #        #   #    #
  ####   ####  #    # # #        #    ####

+ f music
View SST
  #sudo apt-get install recode libxml2-utils
  #cat << EOF > /tmp/request.xml
  #echo " /
  #<?xml version='1.0' encoding='UTF-8' standalone='no' ?> /
  #<SOAP-ENV:Envelope /
  #SOAP-ENV:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/' /
  #xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/' /
  #xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/' /
  #xmlns:xsi='http://www.w3.org/1999/XMLSchema-instance' /
  #xmlns:xsd='http://www.w3.org/1999/XMLSchema'> /
  #<SOAP-ENV:Body> /
  #<GetCurrentlyPlaying> /
  #</GetCurrentlyPlaying> /
  #</SOAP-ENV:Body> /
  #</SOAP-ENV:Envelope>" >> /tmp/request.xml
  clear
  while :
  do
  curl -X POST -H "Content-Type: text/xml" -d @/tmp/request.xml http://www.streamingsoundtracks.com/soap/FM24seven.php 2>/tmp/null > /tmp/sst.xml
  album=`xmllint --xpath "//*[local-name()='Album']/text()" /tmp/sst.xml | recode html..UTF-8`
  artist=`xmllint --xpath "//*[local-name()='Artist']/text()" /tmp/sst.xml | recode html..UTF-8`
  title=`xmllint --xpath "//*[local-name()='Track']/text()" /tmp/sst.xml | recode html..UTF-8`
  cover=`xmllint --xpath "//*[local-name()='CoverLink']/text()" /tmp/sst.xml`
  track=`xmllint --xpath "//*[local-name()='Length']/text()" /tmp/sst.xml`
  track=$((track / 1000))
  printf "\033[01m$album -\033[00m $artist -\033[34m $title -\033[00m [`date -u -d @${track} +"%M:%S"`]\n"
  PlayStar=`xmllint --xpath "//*[local-name()='PlayStart']/text()" /tmp/sst.xml`
  PlayLength=`xmllint --xpath "//*[local-name()='Length']/text()" /tmp/sst.xml`
  SystemTime=`xmllint --xpath "//*[local-name()='SystemTime']/text()" /tmp/sst.xml`
  PSTART=`date -d "$PlayStar" "+%s"`
  PLENGT=$(($PlayLength / 1000))
  FIN=`date -d "$SystemTime" "+%s"`
  PW=$((PSTART+PLENGT))
  secs=$((PW-FIN))
  while [ $secs -gt 0 ]; do
    sleep 1
    secs=$((secs-1))
  done
  done



 #        ##   #    #  ####  #    #   ##    ####  ######
 #       #  #  ##   # #    # #    #  #  #  #    # #
 #      #    # # #  # #      #    # #    # #      #####
 #      ###### #  # # #  ### #    # ###### #  ### #
 #      #    # #   ## #    # #    # #    # #    # #
 ###### #    # #    #  ####   ####  #    #  ####  ######

+ f install
node.js
  # https://nodejs.org
  clear
  sudo apt-get -y install build-essential
  wget https://nodejs.org/dist/v10.12.0/node-v10.12.0-linux-armv6l.tar.gz
  sudo tar -xvf node-v10.12.0-linux-armv6l.tar.gz --strip 1 -C /usr/local
  rm node-v10.12.0-linux-armv6l.tar.gz

+ f install
go lang
  # https://golang.org/dl
  clear
  VERSION=1.11.4
  wget https://dl.google.com/go/go$VERSION.linux-armv6l.tar.gz
  sudo tar -xvf go$VERSION.linux-armv6l.tar.gz -C /usr/local
  rm go$VERSION.linux-armv6l.tar.gz
  sudo mkdir /opt/go
  sudo chown -R $USER:$USER /opt/go
  cat << 'EOF' >> ~/.bashrc
  export GOROOT=/usr/local/go
  export GOPATH=/opt/go
  export PATH="$PATH:$GOROOT/bin:$GOPATH/bin"
  EOF
  source ~/.bashrc

+ f install
python
  clear
  sudo apt-get -y install python-pip python-dev
  sudo pip install --upgrade pip

+ f install
python 3.7.2
  clear
  sudo apt-get update
  sudo apt-get -y install build-essential tk-dev 
  sudo apt-get -y install libncurses5-dev libncursesw5-dev libreadline6-dev
  sudo apt-get -y install libdb5.3-dev libgdbm-dev libsqlite3-dev libssl-dev
  sudo apt-get -y install libbz2-dev libexpat1-dev liblzma-dev zlib1g-dev
  sudo apt-get -y install libffi-dev
  wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xz
  tar xf Python-3.7.2.tar.xz
  cd Python-3.7.2
  ./configure
  make -j4
  sudo make install
  sudo make altinstall
  python3.7 -V
  sudo rm -r Python-3.7.2
  rm Python-3.7.2.tar.xz
  sudo apt-get -y --purge remove build-essential tk-dev
  sudo apt-get -y --purge remove libncurses5-dev libncursesw5-dev libreadline6-dev
  sudo apt-get -y --purge remove libdb5.3-dev libgdbm-dev libsqlite3-dev libssl-dev
  sudo apt-get -y --purge remove libbz2-dev libexpat1-dev liblzma-dev zlib1g-dev
  sudo apt-get -y --purge remove libffi-dev
  sudo apt-get -y autoremove
  sudo apt-get -y clean


 # #    #  ####  #####   ##   #      #
 # ##   # #        #    #  #  #      #
 # # #  #  ####    #   #    # #      #
 # #  # #      #   #   ###### #      #
 # #   ## #    #   #   #    # #      #
 # #    #  ####    #   #    # ###### ######

+ f install
prerequisites
  clear
  sudo apt-get install git gpac libav-tools mkvtoolnix mpv exiv2 mc rsync sshpass tmux ntfs-3g ghostscript

+ f install
update rpi
  clear ; rm -r ~/rpi
  git clone https://github.com/ManuCart/Raspberry-Pi.git ~/rpi

+ f install
tmux
  # https://github.com/tmux/tmux
  clear
  sudo apt-get install libevent-dev libncurses5-dev
  wget https://github.com/tmux/tmux/releases/download/2.6/tmux-2.6.tar.gz
  tar xvfz tmux-2.6.tar.gz
  cd tmux-2.6
  ./configure && make
  sudo mv ./tmux /usr/local/bin/tmux
  cd ..
  rm tmux-2.6.tar.gz
  rm -rf tmux-2.6

+ f install
mc
  # https://github.com/MidnightCommander/mc
  clear
  sudo apt-gen install autogen autoconf libtool gettext libslang2-dev
  wget https://github.com/MidnightCommander/mc/archive/4.8.20.tar.gz
  tar xvfz 4.8.20.tar.gz
  cd mc-4.8.20
  autoconf
  ./configure
  make
  make install

+ f install
git
  # https://github.com/ManuCart/Raspberry-Pi
  clear
  sudo apt-get install git
  git clone git@github.com:ManuCart/Raspberry-Pi.git ~/rpi
  cd rpi
  ssh-keygen -t rsa -b 4096 -C "Raspberry Pi" -f $HOME/.ssh/github
  # Copy contents github.pub to github.com
  eval $(ssh-agent -s)
  ssh-add ~/.ssh/github
  ssh -vT git@github.com
  git remote set-url origin git@github.com:ManuCart/Raspberry-Pi.git
  git config --global user.name "ManuCart"
  git config --global user.email "John.Smith@example.com"
  echo -e "Host github.com \n IdentityFile ~/.ssh/github_rsa" >> ~/.ssh/config

+ f install
castnow
  # https://github.com/xat/castnow
  clear
  sudo npm install castnow -g

+ f install
Dropbox-Uploader
  # https://github.com/andreafabrizi/Dropbox-Uploader
  clear
  sudo curl -o /usr/local/bin/dropbox_uploader \
  https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh
  sudo chmod +x /usr/local/bin/dropbox_uploader
  dropbox_uploader init

+ f install
drive
  # https://github.com/odeke-em/drive
  clear
  go get -u github.com/odeke-em/drive/cmd/drive
  mkdir /media/hdd/drive
  drive init /media/hdd/drive

+ f install
google-music-scripts
  # https://github.com/thebigmunch/google-music-scripts
  clear
  sudo apt-get install libav-tools #avconv
  sudo pip3.7 install google-music-scripts

+ f install
hue-cli
  # https://github.com/bahamas10/hue-cli
  clear
  npm install -g hue-cli
  hue search
  hue -H 192.168.0.10 register

+ f install
iphone
  # https://github.com/libimobiledevice
  # https://gist.github.com/kfatehi/8922430
  clear
  sudo apt-get -y install git build-essential libxml2-dev python2.7 python2.7-dev fuse libtool autoconf libusb-1.0-0-dev libfuse-dev
  mkdir iphone_libs && cd iphone_libs
  git clone https://github.com/libimobiledevice/libplist.git
  git clone https://github.com/libimobiledevice/libusbmuxd.git
  git clone https://github.com/libimobiledevice/usbmuxd.git
  git clone https://github.com/libimobiledevice/libimobiledevice.git
  git clone https://github.com/libimobiledevice/ifuse.git
  export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
  echo "export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig" | sudo tee -a /etc/bash.bashrc
  cd libplist && ./autogen.sh && make && sudo make install && cd ..
  cd libusbmuxd && ./autogen.sh && make && sudo make install && cd ..
  cd libimobiledevice && ./autogen.sh && make && sudo make install && cd ..
  cd usbmuxd && ./autogen.sh && make && sudo make install && cd ..
  cd ifuse && ./autogen.sh && make && sudo make install && cd ..
  groupadd -g 140 usbmux &>/dev/null
  useradd -c 'usbmux user' -u 140 -g usbmux -d / -s /sbin/nologin usbmux &>/dev/null
  passwd -l usbmux &>/dev/null
  echo /usr/local/lib | sudo tee /etc/ld.so.conf.d/libimobiledevice-libs.conf
  sudo ldconfig

+ f install
motion
  # http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome
  clear
  echo 'disable_camera_led=1' | sudo tee -a /boot/config.txt
  sudo modprobe bcm2835-v4l2
  echo 'bcm2835-v4l2' | sudo tee -a /etc/modules
  sudo apt-get -y install motion
  sudo chmod 664 /etc/motion/motion.conf
  mkdir /tmp/motion
  echo 'start_motion_daemon=no' | sudo tee /etc/default/motion
  sudo mcedit /etc/motion/motion.conf
  > daemon off
  > process_id_file /var/run/motion/motion.pid
  > ffmpeg_output_movies off
  > rotate 270
  > width 1280
  > height 960
  > threshold 3000
  > webcam_localhost off
  > target_dir /media/hdd/motion
  > control_localhost off
  > on_event_start /usr/local/bin/pushbullet push all note "%d/%m/%Y %H:%M:%S motion detected"
  > on_picture_save /usr/local/bin/dropbox_uploader upload %f /motion/%d-%m-%Y/%H-%M-%S.jpg
  sudo mkdir /var/run/motion
  sudo chmod 777 /var/run/motion


+ f install
Pi Hole
  clear
  curl -sSL https://install.pi-hole.net | bash

+ f install
Samba
  clear
  sudo apt-get -y install samba samba-common-bin
  cat << EOF | sudo tee -a /etc/samba/smb.conf
  [HDD]
  comment = Raspberry Pi Hard Drive
  path = /media/hdd
  read only = no
  browsable = yes
  EOF
  sudo service smbd restart
  sudo smbpasswd -a pi

+ f install
Sejda
  # https://github.com/torakiki/sejda
  clear
  sudo apt-get -y install oracle-java8-jdk
  curl -L -o sejda.zip https://github.com/torakiki/sejda/releases/download/v3.2.49/sejda-console-3.2.49-bin.zip
  unzip sejda.zip
  sudo mkdir /opt/sejda
  sudo chown -R pi:pi /opt/sejda
  mv sejda-console-3.0.18/* /opt/sejda/
  rm -rf sejda.zip sejda-console-3.0.18
  chmod +x /opt/sejda/bin/sejda-console

+ f install
sharp-cli
  # https://github.com/vseventer/sharp-cli
  clear ; cd ~
  npm install sharp-cli

+ f install
squid
  # http://www.squid-cache.org/
  clear ; sudo apt-get install squid

+ f install
ssh
  mkdir ~/.ssh
  cd ~/.ssh
  ssh-keygen -t rsa -b 4096 -N '' -C pi@raspberry
  mv id_rsa.pub authorized_keys
  sudo chmod 600 authorized_keys
  cat << EOF | sudo tee -a /etc/ssh/sshd_config
  PermitRootLogin no
  AuthorizedKeysFile /home/pi/.ssh/authorized_keys
  PasswordAuthentication no
  Match Address 127.0.0.1,192.168.0.0/24
  PasswordAuthentication yes
  EOF
  sudo service ssh restart

+ f install
transmission
  # http://www.transmissionbt.com/
  sudo apt-get -y install transmission-daemon
  mkdir /media/hdd/torrents
  sudo usermod -a -G debian-transmission pi
  sudo chgrp debian-transmission /media/hdd/torrents
  sudo chmod 777 -R /media/hdd/torrents
  sudo mcedit /etc/default/transmission-daemon
   >>> ENABLE_DAEMON=0
  sudo service transmission-daemon stop
  sudo sed -ie '$d' /etc/transmission-daemon/settings.json
  cat << EOF | sudo tee -a /etc/transmission-daemon/settings.json
  ,
  "download-dir": "/media/hdd/torrents",
  "incomplete-dir": "/media/hdd/torrents",
  "rpc-authentication-required": false,
  "rpc-whitelist": "127.0.0.1,192.168.0.*",
  "speed-limit-down": 500,
  "speed-limit-down-enable": true,
  "speed-limit-down-enabled": true,
  "speed-limit-up": 5,
  "speed-limit-up-enable": true,
  "speed-limit-up-enabled": true,
  "start-added-torrents": true,
  "trash-original-torrent-files": true,
  "umask": 0,
  "watch-dir-enabled": true,
  "watch-dir": "/tmp"
  }
  EOF
  sudo service transmission-daemon restart
  sudo update-rc.d -f transmission remove
  sudo update-rc.d transmission-daemon defaults
  sudo update-rc.d transmission-daemon remove

+ f install
upload-gphotos
  # https://github.com/3846masa/upload-gphotos
  npm i -g npm
  npm install -g upload-gphotos

+ f install
virtual box
  echo %{Password for sudo} | sudo -S echo
  echo "`whoami` ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/vbox
  sudo apt-get -y install sshfs rsync mc
  sudo apt-get -y install gcc make perl linux-headers-$(uname -r)
  sudo mkdir -p /media/cdrom
  sudo mount -t auto /dev/cdrom /media/cdrom/
  cd /media/cdrom/
  sudo sh VBoxLinuxAdditions.run
  sudo adduser `whoami` vboxsf
  sudo reboot

+ f install
youtube-dl
  # https://github.com/rg3/youtube-dl
  sudo apt-get -y install libavcodec-extra libav-tools
  sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
  sudo chmod a+rx /usr/local/bin/youtube-dl
  echo "<youtube-dl Playlist Link>" > ~/.youtube-dl
  mkdir /medi/hdd/youtube-dl
  youtube-dl --output "/media/hdd/youtube-dl/%(title)s.%(ext)s" https://www.youtube.com/playlist?list=`cat ~/.youtube-dl`

+ f install
youtube-upload
  # https://github.com/tokland/youtube-upload
  # Warning https://github.com/tokland/youtube-upload/pull/264
  sudo pip install --upgrade google-api-python-client oauth2client progressbar2
  wget https://github.com/tokland/youtube-upload/archive/master.zip
  unzip master.zip
  cd youtube-upload-master
  sudo python setup.py install
  dropbox_uploader download /opt/key/youtube-upload-client-secret.json
  mv youtube-upload-client-secret.json .client_secrets.json
  dropbox_uploader download /opt/key/samplevideo.mp4
  youtube-upload --title="test" --privacy="private" samplevideo.mp4
  cd ..
  rm samplevideo.mp4 master.zip
  sudo rm -rf youtube-upload-master
