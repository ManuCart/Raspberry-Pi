+ ! f backup | ! f system | ! f import | ! f music | ! f torrent | ! f photos | ! f install | ! f github
[[  menu  ]]
  N=`tmux display-message -p '#W'`
  tmux send -t bg:1 'tmux send -t pi:'+$N+' M-c ~/mc.menu ENTER' ENTER

+ f config
Create ~/mc.menu
  clear
  if [ ! -d ~/mc.menu ] ; then mkdir ~/mc.menu ; fi
  cd ~/mc.menu
  touch "backup" "config" "files" "import" "music" "github" "system"
  touch "tools" "tmux" "videos" "torrent" "photos" "install"

+ f config
create media sub-folders
  clear
  sudo mkdir /media/hdd /media/freebox /media/cardreader /media/usbkey /media/camera /media/gopro

+ f config
source ~/.tmux.conf
  clear
  tmux source-file ~/.tmux.conf
  tmux send -t B 'tmux send -t A F2' ENTER

+ f config
set auto date & time
  clear
  sudo /etc/init.d/ntp stop
  sudo ntpd -q -g
  sudo /etc/init.d/ntp start

+ f config
exit tmux and ssh
  tmux detach

+ f config
create new user
  sudo adduser bot
  sudo adduser bot sudo
  sudo adduser bot adm
  sudo visudo
  #pi   ALL=(ALL) ALL
  #bot  ALL=(ALL) NOPASSWD: ALL
  sudo reboot
  sudo apt-get update
  sudo deluser pi sudo
  sudo deluser pi adm
  sudo deluser -remove-home pi

+ f config
start tmux after logon
  cat << 'EOF' | tee -a ~/.profile
  if [ -z "$TMUX" ]; then
  /bin/sh ~/rpi/rescue
  fi
  EOF

+ f github
clone rpi
  rm -rf ~/rpi
  git clone https://github.com/ManuCart/Raspberry-Pi.git ~/rpi

+ t t
git push
  clear
  for f in %t; do
    git add "$f"
  done
  git commit -m "update"
  git push

+ F github & t t
git push force
  clear
  for f in %t; do
    git add "$f"
  done
  PARAM=%{parameters}
  git commit -m "$PARAM"
  git push origin master --force

+ F github
git pull
  clear ; git pull

+ f github
git discard the local changes
  clear ; git reset --hard ; git pull

+ f backup
backup photos & videos to freebox hdd
  clear
  sudo mount -t cifs //mafreebox.freebox.fr/Server\ Freebox/  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntl,vers=1.0
  mkdir /media/freebox/photos /media/freebox/videos
  rsync --archive --no-o --no-g --delete --info=progress2 "/media/hdd/photos/Google Photos" /media/freebox/photos
  #rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/videos/ /media/freebox/videos

+ f backup
backup photos & videos to freebox ext hdd
  clear
  sudo mount -t cifs //mafreebox.freebox.fr/Backup  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntlm,vers=1.0
  mkdir /media/freebox/Photos /media/freebox/Videos
  rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/photos/ /media/freebox/photos
  #rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/videos/ /media/freebox/Videos

+ f backup
restore photos & videos from freebox ext hdd
  clear
  sudo mount -t cifs //mafreebox.freebox.fr/Backup  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntlm,vers=1.0
  #mkdir /media/freebox/Photos /media/freebox/Videos
  rsync --archive --no-o --no-g --delete --info=progress2 /media/freebox/photos/ /media/hdd/photos
  #rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/videos/ /media/freebox/Videos

+ f backup
restore photos & videos from freebox hdd
  clear
  sudo mount -t cifs //mafreebox.freebox.fr/Server\ Freebox/  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntl,vers=1.0
  #mkdir /media/freebox/Photos /media/freebox/Videos
  rsync --archive --no-o --no-g --delete --info=progress2 /media/freebox/photos/ /media/hdd/photos
  #rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/videos/ /media/freebox/Videos

+ f backup
Backup Raspberry Pi to Rpi3Dev
  clear
  rsync --archive --no-o --no-g --delete --info=progress2 /media/hdd/photos/ dev@192.168.0.200:/media/hdd/photos

+ f system
update
  sudo apt-get -y autoremove
  sudo apt-get -y update
  sudo apt-get -y dist-upgrade
  sudo apt-get -y upgrade
  sudo rpi-update

+ f system
mount ntfs usbkey
  clear ; sudo mount -t ntfs-3g `ls /dev/disk/by-id/usb*-part1` /media/usbkey

+ f system
mount-cardreader
  clear ; sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader

+ f system
mount-hdd
  clear ; sudo mount /dev/sdb1 /media/hdd

+ f system
mount-freebox
  clear ; sudo mount -t cifs //mafreebox.freebox.fr/Server\ Freebox/  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntlm,vers=1.0

+ f system
format hdd drive
  #Attention lignes suivantes pour formatter
  #sudo mkfs.ext4 /dev/sda1 -L RaspberryPi
  #sudo e2label /dev/sda1 RaspberryPi
  #sudo chown -R pi:pi /media/hdd

+ f system
create fstab file
  clear
  echo 'LABEL="RaspberryPi" /media/hdd ext4 nofail,noatime 0 2' | sudo tee -a /etc/fstab
  echo '//mafreebox.freebox.fr/Server\ Freebox/ /media/freebox cifs _netdev,rw,user=freebox,password=Freebox4K,iocharset=utf8,uid=1000,sec=ntlm,file_mode=0777,dir_mode=0777,vers=1.0 0 0' | sudo tee -a /etc/fstab
  sudo chown -R pi:pi /media/hdd

+ f system
create new raspbian image
  . ~/config.ini ; clear
  #Use lsblk to check /dev/sdc
  rm /media/hdd/raspbian.zip
  curl --progress-bar -L -o /media/hdd/raspbian.zip https://downloads.raspberrypi.org/raspbian_lite_latest
  #curl --progress-bar -L -o /media/hdd/raspbian.zip https://downloads.raspberrypi.org/raspbian_full_latest
  #curl --progress-bar -L -o /media/hdd/raspbian.zip https://downloads.raspberrypi.org/raspbian_latest
  #unzip -p raspbian.zip | sudo dd of=/dev/sda bs=4M status=progress conv=fsync
  unzip -p /media/hdd/raspbian.zip | sudo dd of=/dev/sda bs=4M conv=fsync
  sudo mkdir /media/cardreader
  sudo mount /dev/sda1 /media/cardreader
  sudo touch /media/cardreader/ssh
  sudo umount /media/cardreader
  ifttt "New Raspbian Image Created"

+ t t
ez Copy
  clear ; DIR=%D ; set %t
  for FILE in "$@"; do
    echo "Copy : $FILE to $DIR"
    rsync --archive --no-o --no-g --info=progress2 "$FILE" "$DIR"
  done

+ t t
ez Move
  clear ; DIR=%D ; set %t
  for FILE in "$@"; do
    echo "Move : $FILE to $DIR"
    rsync --archive --no-o --no-g --info=progress2 --remove-sent-files "$FILE" "$DIR"
  done

+ F files * & t t
Delete
  clear ; set %t
  while [ -n "$1" ] ; do
    rm -rf "$1" ; shift
  done

+ F files & t t
upload to dropbox
  clear ; cd %d ; set %t
  for FILE in "$@"; do
    dropbox_uploader upload "$FILE" "$FILE"
  done

+ f files
download from dropbox
  param = %{Dropbox Filename}
  clear ; cd %d
  dropbox_uploader download "$param"

+ f files
download from google drive
  param = %{Google Drive Filename}
  clear ; cd "/media/hdd/Drive"
  if ! drive pull --no-prompt "$param" ; then ifttt "ERROR Google pull files" "ERROR PULL DRIVE"; return; fi

+ F files & t t
move to "Freebox Server"
 sudo mount -t cifs //mafreebox.freebox.fr/Server\ Freebox/  /media/freebox -o user=freebox,password=Freebox4K,uid=1000,gid=1000,rw,sec=ntlm,vers=1.0
 clear ; cd %d ; set %t
 for FILE in "$@"; do
   echo "Copy : $FILE"
   rsync --archive --no-o --no-g --info=progress2 --remove-sent-files "$FILE" "/media/freebox"
 done

+ F files & t t
upload to Gdrive
  cd /media/hdd/Drive
  #drive pull --no-prompt "Raspberry Pi/"
  clear ; cd %d ; set %t
  for FILE in "$@"; do
    cp "$FILE" "/media/hdd/Drive/Raspberry Pi/"
  done
  cd /media/hdd/Drive
  if ! drive pull --no-prompt "Raspberry Pi/" ; then ifttt "ERROR Google push files" "ERROR PUSH DRIVE"; return; fi

+ f import
import videos & merge & upload to youtube
  clear ; source ~/config.ini
  #rm /media/hdd/youtube-upload/*
  sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader
  cp -v /media/cardreader/DCIM/???_PANA/*.MP4 /media/hdd/youtube-upload
  sudo umount /media/cardreader
  ifttt "Import done" "You can remove SD card reader"
  cd /media/hdd/youtube-upload
  FILES=`find *.* type f -printf "%%f + " | sort`
  mkvmerge -o out.mkv $FILES
  youtube-upload --title="-" --privacy="private" out.mkv
  ifttt "Backup done" "Merge & uploaded to youtube"
  sleep 30m
  ifttt "Youtube done" "Can watch to youtube"

+ f import
import gopro
  ID="/dev/disk/by-id/usb-GoPro_Storage_*-0:0-part1"
  sudo mount $ID /media/gopro
  mkdir /media/hdd/gopro /media/hdd/gopro/photos /media/hdd/gopro/videos
  cp -v /media/gopro/DCIM/???GOPRO/*.JPG /media/hdd/gopro/photos
  cp -v /media/gopro/DCIM/???GOPRO/*.MP4 /media/hdd/gopro/videos
  ifttt "photos and videos from gopro are saved"
  rm /tmp/copy-gopro
  sudo umount /media/gopro

+ f import
import usbkey
  ID="/dev/disk/by-id/usb-Kingston_DataTraveler_3.0_*-0:0-part1"
  VIDEOS="/media/hdd/youtube-upload"
  sudo mkdir /media/usbkey
  sudo mount $ID /media/usbkey
  rsync --archive --info=progress2 /media/usbkey/ $VIDEOS
  sudo umount /media/usbkey

+ F music & t t
upload to gmusic
  account=%{account number}
  clear ; cd %d ; set %t
  for d in "$@"; do gms upload -u $account "$d"; done
  ifttt "Rasperry Pi" "gmusic upload done"

+ F music & t t
download from gmusic
  account=%{Give account number}
  gms download -u $account "/media/hdd/music/%album%/%title%"
  ifttt "Rasperry Pi" "gmusic download done"

+ f\.wav & F music & t t
wav to mp3
  clear ; cd %d ; set %t
  for d in "$@"; do lame --preset extreme -q 0 -h "$1" "$1.mp3"; done

+ f\.mp3 & F music & t t
concat mp3
  #sudo apt-get install mp3wrap
  clear ; cd %d ; set %t
  mp3wrap output.mp3 $@;

+ f\.flac & t t
flac to mp3
  clear ; cd %d ; set %t
  for f in "$@"; do
    album="$(metaflac --show-tag=album "$f" | sed 's/[^=]*=//')"
    artist="$(metaflac --show-tag=artist "$f" | sed 's/[^=]*=//')"
    date="$(metaflac --show-tag=date "$f" | sed 's/[^=]*=//')"
    title="$(metaflac --show-tag=title "$f" | sed 's/[^=]*=//')"
    year="$(metaflac --show-tag=date "$f" | sed 's/[^=]*=//')"
    genre="$(metaflac --show-tag=genre "$f" | sed 's/[^=]*=//')"
    tracknumber="$(metaflac --show-tag=tracknumber "$f" | sed 's/[^=]*=//')"
    flac --decode --stdout "$f" | lame --preset extreme --add-id3v2 --tt "$title" --ta "$artist" --tl "$album" --ty "$year" --tn "$tracknumber" --tg "$genre" - "${f%.flac}.mp3"
  done

+ f photos
Take Raspberry Pi Photo
  tput cup 0 0 ; clear
  raspistill -v -rot 180 -o /media/hdd/photo.jpg
  source ~/config.ini
  #curl -s -X POST https://api.telegram.org/bot$apiToken/sendPhoto -d photo="/media/hdd/photo.jpg" -d chat_id=$userChatId
  #curl -s -X POST https://api.telegram.org/bot$apiToken/sendPhoto -d photo="/media/hdd/photo.jpg" -d chat_id=@MyChannel
  dropbox_uploader upload /media/hdd/photo.jpg /Camera/$(date +"%%Y%%m%%dT%%H%%M%%S").JPG
  rm /media/hdd/photo.jpg

+ f photos
Found double photos
  sudo apt-get -y install fslint fdupes
  /usr/share/fslint/fslint/fslint "/media/hdd/drive/Google Photos" > photos_double.txt
  fdupes -Sr "/media/hdd/drive/Google Photos" > ~/photos_double2.txt
  ifttt "Search double Photos" "Finish"

+ F videos & f\.avi | f\.AVI | f\.mkv | f\.MKV | f\.mp4 | f\.MP4 & t t
vlc upload (iphone)
  clear ; cd %d ; set %t
  for FILE in "$@"; do
   echo "Upload to VLC : $FILE"
   curl -# -F file=@"$FILE" http://192.168.0.21/upload.json
   echo
  done

+ F videos & f\.avi | f\.AVI | f\.mkv | f\.MKV | f\.mp4 | f\.MP4 & t t
vlc upload (ipad)
  clear ; cd %d ; set %t
  for FILE in "$@"; do
   echo "Upload to VLC : $FILE"
   curl -# -F file=@"$FILE" http://192.168.0.51/upload.json
   echo
  done

+ f videos
tv-dl
  mcedit -x /media/hdd/tmp/youtube.txt
  clear ; source ~/config.ini; cd /media/hdd/youtube-dl
  while IFS=, read url out ; do
    if [[ $url == h* ]]; then
    if [[ $out == "" ]]; then youtube-dl --fixup warn $url; else
    youtube-dl --fixup warn -o "$out" $url; fi
    fi
  done < /media/hdd/tmp/youtube.txt
  ifttt "Youtube-dl" "tv-dl done"

+ f videos
yt-dl-playlist
  clear ; source ~/config.ini
  if [ ! -d /media/hdd/youtube-dl ] ; then mkdir /media/hdd/youtube-dl ; fi
  youtube-dl --ignore-errors --format 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' \
  --merge-output-format mp4 --output "/media/hdd/youtube/%%(title)s.%%(ext)s" https://www.youtube.com/playlist?list=$Playlist
  ifttt "Youtube-dl" "dl playlist done"

+ f *.mp4 | f *.MP4 & F videos & t t
conv mp4 to aac
  set %t
  aac="$(basename "$1" | cut -d . -f1).aac"
  avconv -loglevel panic -i "$1" -c copy -map 0:a:0 "$aac"

+ f \.mp4 | f \.MP4 & F videos & t t
mux mp4 and aac to mkv
  set %t
  aac="$(basename "$1" | cut -d. -f1).aac"
  mkv="$(basename "$1" | cut -d. -f1).mkv"
  MP4Box -add "$1" -add "$aac" "$mkv"

+ f \.avi | f \.AVI | f \.mkv | f \.mov | f \.MOV | f \.mp4 | f \.MP4 | f \.mts | f \.webm | f \.wmv & F videos & t t
upload to youtube
  clear ; source ~/config.ini ; cd %d ; set %t
  for FILE in "$@"; do
    #while ! youtube-upload --title="$FILE" --category="Entertainment" --privacy="private" \
    youtube-upload --title="-" --privacy="private" "$FILE"
    #"$FILE" ; do :; done
  done
  ifttt "Youtube Upload" "done"

+ f \.mts | f \.MTS | f \.mov | f \.MOV | f \.avi | f \.AVI | f \.mp4 | f \.MP4 | f \.webm & F videos & t t
merge mkv
  clear ; cd %d ; set %t
  FILES="$1"; shift
  for FILE in "$@"; do
    FILES="$FILES + $FILE"
  done
  mkvmerge -o out.mkv $FILES

+ f \.mp4 | f \.MP4 & F videos & t t
merge mp4
  clear ; cd %d ; set %t
  #FILES="-cat $1" ; shift
  FILES="-force-cat -add $1" ; shift
  for FILE in "$@"; do
    FILES="$FILES -cat $FILE"
  done
  echo "$FILES"
  MP4Box $FILES -new merged.mp4

+ f \.mp4 | f \.MP4 & F videos & t t
extract mp4 video without sound
  clear ; cd %d ; set %t
  #Never tested
  for FILE in "$@"; do
    mkvextract tracks out.mkv 0:$1.mp4
    shift
  done

+ f \.mp4 | f \.MP4 & F videos & t t
rotate 90 mp4
  clear ; cd %d ; set %t
  for FILE in "$@"; do
    avconv -i "$FILE" -vf transpose=1 -strict experimental "Rotate-$FILE"
  done

+ f \.mov | f \.MOV | f \.avi | f \.AVI | f \.mp4 | f \.MP4 | f \.mkv | f \.MKV & F videos & t t
cut video
  clear
  read -e -p "Start : " -i "00:00:00" start
  read -e -p "Stop  : " -i "00:00:00" stop
  echo "Please Wait..."
  mpv -ss $start -endpos $stop -ovc copy -oac pcm %f -o %b-CUT.%x

+ f videos
create stopmotion
  clear ; source ~/config.ini
  # - 720p (1280×720)
  # – 1080p (1920×1080) full HD
  # – 1440p (2560×1440) 2K
  # – 2160p (3840×2160) 4K
  # – 4320p (7680×4320) 8K
  ###GoPro 2592x1944 => 1440p(2K):2560x1440
  ###DMC TZ40 ????x???? => 1440p(2K):2560x1440
  CUT="2560x1440+16+0" #Top
  #CUT="2560x1440+16+252" #Center
  #CUT="2560x1440+16+504" #Bas
  ###Sony 4000x3000 => 2160p(4K):3840x2160
  #CUT="3840x2160+80+0" #Top
  #CUT="3840x2160+80+420" #Center
  #CUT="3840x2160+80+840" #Bas
  cd /media/hdd/DCIM
  mkdir CROP
  for img in *.JPG; do
  echo "Convert $img"
  #convert "$img" -crop $CUT "CROP/$img-CROP.JPG"
  #convert -rotate "90" "$img" "CROP/$img-CROP.JPG"
  done
  #ls -1 CROP/*-CROP.JPG >  files.lst
  ls -1 *.JPG >  files.lst
  mpv mf://@files.lst -mf-type=jpg -mf-fps=7.5 -ovc=rawvideo -no-audio -o stopmotion.avi
  youtube-upload --title="Stopmotion" --category="Entertainment" --privacy="private" stopmotion.avi
  ifttt "Raspberry Pi" "Stopmotion created"

+ f videos
download youtube playlist and merge with external music
  youtube-dl -k https://www.youtube.com/playlist?list=1234567890
  #Be careful first add next cat
  FILES="-force-cat -add 1.mp4 -cat 2.mp4 -cat 3.mp4 (...)"
  MP4Box $FILES -new merged.mp4
  mkvmerge -o output-with-sound.mkv -A input-video.mkv soundfile.mp3

+ f tmux
switch to tmux background
  tmux switch-client -t bg
  tmux send -t bg:1 'tmux send -t pi:1 F2' ENTER
  tmux send -t bg:1 'tmux switch-client -t pi'

+ f tmux
create tmux window
  tmux new-window -n "●"
  session=`tmux display-message -p '#I'`
  tmux set pane-border-format " $session "
  tmux send -t $session '. ~/mcui/functions' ENTER
  tmux send -t $session '/usr/bin/mc -x /home/pi/rpi/ /media/hdd/ && clear' ENTER

+ f torrent
download with aria2c
  rm -rf /media/hdd/drive/Torrents/*
  rm  ~/aria2-torrents
  cd /media/hdd/drive
  drive pull --quiet Torrents/
  find /media/hdd/drive/Torrents/*.torrent -type f | while read FILE ; do
  echo "$FILE" >> ~/aria2-torrents
  done
  aria2c --max-overall-upload-limit=200K --max-concurrent-downloads=25 --dir=/media/hdd --input-file=/home/dev/aria2-torrents

+ f *.jpg | f *.JPG
drive push rpi
  drive push --no-prompt

+ f *.jpg | f *.JPG
drive pull rpi
  drive pull --no-prompt

+ f *.pdf | f *.PDF & t t
Uncrypt PDF
  set %t
  while [ -n "$1" ]; do
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$1.uncrypted.pdf" "$1"
    shift
  done

+ f \.pdf | f \.PDF | F \.pdf | F \.PDF
A Drive pull Documents and Snoozed
  clear ; source ~/config.ini
  GDRIVE=/media/hdd/drive ; cd $GDRIVE
  if ! drive pull --no-prompt -fix-clashes $GDRIVE/Snoozed $GDRIVE/Documents $GDRIVE/Notices ; then ifttt "Merge PDF" "ERROR PULL GDRIVE" ; exit; fi

+ f \.pdf | f \.PDF & t t
B Merge PDF
  # Don't use pdftk files genarated are too big
  # T source files t destination Files
  clear ; source ~/config.ini ; array=()
  set %T ; for FILE in "$@"; do
    if grep -r "Encrypt" "%D/$FILE" ; then echo "ERROR : $FILE CRYPTED" ; ifttt "ERROR PDF" "CRYPTED $FILE"; exit; fi
    array+=("%D/$FILE") ; done
  set %t ; for FILE in "$@"; do
    if grep -r "Encrypt" "%d/$FILE" ; then echo "ERROR : $FILE CRYPTED" ; ifttt "ERROR PDF" "CRYPTED $FILE"; exit; fi
    array+=("%d/$FILE") ; done
  /opt/sejda/bin/sejda-console merge -f "${array[@]}" -o "$(dirname "${array[-1]}")/!$(basename "${array[-1]}")"
  rm "${array[@]}"

+ f \.pdf | f \.PDF | F \.pdf | F \.PDF
C Drive push Documents and Snoozed
  clear ; source ~/config.ini
  GDRIVE=/media/hdd/drive ; cd $GDRIVE
  if ! drive push --no-prompt $GDRIVE/Snoozed $GDRIVE/Documents $GDRIVE/Notices ; then iftt "Merge PDF" "ERROR PUSH GDRIVE" ; exit; fi

+ f tools
Import usb key JPG 92pc scanned Files to /media/hdd/djvu
  echo "Please Use SH Flash Disk"
  sudo mount `ls /dev/disk/by-id/usb-Generic_Flash_Disk_*-part1` /media/usbkey
  cp -v /media/usbkey/*.jpg /media/hdd/djvu
  sudo umount /media/usbkey
  echo "You can remove SD card reader"
  cd /media/hdd/djvu
  if ! drive push --no-prompt "/media/hdd/djvu/" ; then ifttt "ERROR Google push files" "ERROR PUSH DRIVE"; return; fi

+ f tools
Automatic Merge pdf files
  ## TODO Delete only files merged
  clear ; source ~/config.ini
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " `date`"
  GDRIVE=/media/hdd/Drive
  FILE=/tmp/gdrive.csv
  ##Init
  cd $GDRIVE
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Download Snoozed Dir"
  rm -rf Snoozed Documents
  if ! drive pull --no-prompt -fix-clashes "Snoozed/"; then ifttt "Auto Merge PDF" "Error pull, please fix clashes in Snoozed folder"; return; fi
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Test if Snoozed Dir Empty"
  if [ `find "Snoozed" -type d -empty` ] ; then tput setaf 2 ; echo -n "[info]" ; tput sgr0 ; echo "  Empty Snoozed Dir"; return; fi
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Test if Snoozed Dir Files Encrypts"
  if grep -r "Encrypt" Snoozed ; then ifttt "`grep -r "Encrypt" Snoozed`"; return; fi
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Download Iftt csv file"
  if ! drive pull --no-prompt --export csv --exports-dir /tmp --same-exports-dir --force ifttt; then ifttt "Auto Merge PDF" "Error pull for ifttt.xls" ; return; fi
  tr -d '\r' < /tmp/ifttt.csv > $FILE
  tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Read Iftt csv file"
  while IFS=, read email in out ; do
    tput setaf 3 ; echo -n "[info]" ; tput sgr0 ; echo " Search $in file..."
    if [[ -n $(find "Snoozed" -name "$in") ]]
        then
        rm ~/files.csv
        tput setaf 2 ; echo -n "[ ok ]" ; tput sgr0 ; echo " find $1"
        find "Snoozed" -name "$in" | sort -r | tr '\n' ',' > ~/files.csv
        cp ~/files.csv ~/files_rm.csv
        echo "Snoozed/$out" >> ~/files.csv
        tput setaf 1 ; echo -n "[FAIL]" ; tput sgr0 ; echo "cat ~/files.csv"
        cat ~/files.csv
        tput setaf 1 ; echo -n "[info]" ; tput sgr0 ; echo " END"
        if ! drive pull --no-prompt "Documents/$out" ; then ifttt "Auto Merge PDF" "Error pull ref doc" ; return; fi
        #mv "Documents/$out" "Snoozed/$out"
        #/opt/sejda/bin/sejda-console merge -l ~/files.csv -o sejda_out.pdf
        #mv sejda_out.pdf "Documents/$out"
        #if ! drive push --no-prompt "Documents/$out" ; then ifttt "Auto Merge PDF" "Error push ref doc" ; return; fi
        while IFS=, read f ; do
        tput setaf 1 ; echo -n "[----]" ; tput sgr0 ; echo " delete $f"
        #rm "$f"
        done < ~/files_rm.csv
    fi
  done < "$FILE"
  rm $FILE
  #if ! drive pull --no-prompt "Snoozed/"; then ifttt "Upload Snoozed" "Error"; return; fi

+ f install
node.js
  # https://nodejs.org
  clear
  VERSION=10.16.0
  sudo apt-get -y install build-essential
  wget https://nodejs.org/dist/v$VERSION/node-v$VERSION-linux-armv7l.tar.gz -O node.tar.gz
  sudo tar -xvf node.tar.gz --strip 1 -C /usr/local
  rm node.tar.gz

+ f install
prerequisites
  clear
  sudo apt-get install git gpac libav-tools mkvtoolnix mpv exiv2 mc rsync sshpass tmux ntfs-3g ghostscript

+ f install
update rpi
  clear ; rm -r ~/rpi
  git clone https://github.com/ManuCart/Raspberry-Pi.git ~/rpi

+ f install
tmux
  # https://github.com/tmux/tmux
  clear
  tmux -V
  tmux kill-server
  sudo apt-get install -y libevent-dev libncurses5-dev
  wget https://github.com/tmux/tmux/releases/download/2.8/tmux-2.8.tar.gz
  tar xvfz tmux-2.8.tar.gz
  cd tmux-2.8
  ./configure && make
  sudo cp ./tmux /usr/bin/tmux
  tmux -V
  cd ..
  rm tmux-2.8.tar.gz
  rm -rf tmux-2.8

+ f install
nvim
  # https://github.com/neovim/neovim
  sudo apt-get install -y git libtool libtool-bin autoconf automake cmake g++ pkg-config unzip libffi-dev
  git clone https://github.com/neovim/neovim.git
  cd neovim
  make CMAKE_BUILD_TYPE=RelWithDebInfo
  sudo make install

+ f install
mc
  # https://github.com/MidnightCommander/mc
  clear
  sudo apt-gen install autogen autoconf libtool gettext libslang2-dev
  wget https://github.com/MidnightCommander/mc/archive/4.8.20.tar.gz
  tar xvfz 4.8.20.tar.gz
  cd mc-4.8.20
  autoconf
  ./configure
  make
  make install

+ f install
git
  # https://github.com/ManuCart/Raspberry-Pi
  clear
  sudo apt-get install git
  git clone git@github.com:ManuCart/Raspberry-Pi.git ~/rpi
  cd rpi
  ssh-keygen -t rsa -b 4096 -C "Raspberry Pi" -f $HOME/.ssh/github
  # Copy contents github.pub to github.com
  eval $(ssh-agent -s)
  ssh-add ~/.ssh/github
  ssh -vT git@github.com
  git remote set-url origin git@github.com:ManuCart/Raspberry-Pi.git
  git config --global user.name "ManuCart"
  git config --global user.email "John.Smith@example.com"
  echo -e "Host github.com \n IdentityFile ~/.ssh/github" >> ~/.ssh/config

+ f install
Dropbox-Uploader
  # https://github.com/andreafabrizi/Dropbox-Uploader
  clear
  sudo curl -o /usr/local/bin/dropbox_uploader \
  https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh
  sudo chmod +x /usr/local/bin/dropbox_uploader
  dropbox_uploader init

+ f install
drive
  # https://github.com/odeke-em/drive
  clear
  go get -u github.com/odeke-em/drive/cmd/drive
  mkdir /media/hdd/drive
  drive init /media/hdd/drive

+ f install
google-music-scripts
  # https://github.com/thebigmunch/google-music-scripts
  clear
  sudo apt-get install libav-tools #avconv
  sudo pip3.7 install -U google-music-scripts

+ f install
Pi Hole
  clear
  curl -sSL https://install.pi-hole.net | bash

+ f install
Samba
  clear
  sudo apt-get -y install samba samba-common-bin
  cat << EOF | sudo tee -a /etc/samba/smb.conf
  [HDD]
  comment = Raspberry Pi Hard Drive
  path = /media/hdd
  read only = no
  browsable = yes
  EOF
  sudo service smbd restart
  sudo smbpasswd -a pi

+ f install
Sejda
  # https://github.com/torakiki/sejda
  clear
  sudo apt-get -y install oracle-java8-jdk
  curl -L -o sejda.zip https://github.com/torakiki/sejda/releases/download/v3.2.72/sejda-console-3.2.72-bin.zip
  unzip sejda.zip
  sudo mkdir /opt/sejda
  sudo chown -R $USER:$USER /opt/sejda
  mv sejda-console-3.2.72/* /opt/sejda/
  rm -rf sejda.zip sejda-console-3.0.72
  chmod +x /opt/sejda/bin/sejda-console

+ f install
ssh
  mkdir ~/.ssh
  cd ~/.ssh
  ssh-keygen -t rsa -b 4096 -N '' -C pi@raspberry
  mv id_rsa.pub authorized_keys
  sudo chmod 600 authorized_keys
  cat << EOF | sudo tee -a /etc/ssh/sshd_config
  PermitRootLogin no
  AuthorizedKeysFile /home/pi/.ssh/authorized_keys
  PasswordAuthentication no
  Match Address 127.0.0.1,192.168.0.0/24
  PasswordAuthentication yes
  EOF
  sudo service ssh restart

+ f install
youtube-dl
  # https://github.com/rg3/youtube-dl
  sudo apt-get -y install libavcodec-extra libav-tools
  sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
  sudo chmod a+rx /usr/local/bin/youtube-dl
  echo "<youtube-dl Playlist Link>" > ~/.youtube-dl
  mkdir /medi/hdd/youtube-dl
  youtube-dl --output "/media/hdd/youtube-dl/%(title)s.%(ext)s" https://www.youtube.com/playlist?list=`cat ~/.youtube-dl`

+ f install
youtube-upload
  # https://github.com/tokland/youtube-upload
  # Warning https://github.com/tokland/youtube-upload/pull/264
  sudo pip install --upgrade google-api-python-client oauth2client progressbar2
  wget https://github.com/tokland/youtube-upload/archive/master.zip
  unzip master.zip
  cd youtube-upload-master
  sudo python setup.py install
  dropbox_uploader download /opt/key/youtube-upload-client-secret.json
  mv youtube-upload-client-secret.json .client_secrets.json
  dropbox_uploader download /opt/key/samplevideo.mp4
  youtube-upload --title="test" --privacy="private" samplevideo.mp4
  cd ..
  rm samplevideo.mp4 master.zip
  sudo rm -rf youtube-upload-master
