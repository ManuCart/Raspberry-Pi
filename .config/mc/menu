Export archive files
  tmux send-keys -t SH "~/headless.sh exportArchive" C-m

Import archive files
  tmux send-keys -t SH "~/headless.sh importArchive" C-m

Copy archive files
  ip="\"%{Enter IP address}\""
  tmux send-keys -t SH "~/headless.sh copyArchive $ip" C-m

Set Raspberry Pi Time
  tmux send-keys -t SH "~/headless.sh set_time" C-m

Update Raspberry Pi
  tmux send-keys -t SH "~/headless.sh update" C-m

Download Torrents with Aria2
  tmux send-keys -t SH "~/headless.sh torrents" C-m
 
Diff Nvim
  set %d ; d="$1" ; set %f ; f="$1" ; a="\"$d/$f\""
  tmux send-keys -t SH "~/headless.sh nvim_diff $a" C-m

+ t t
Upload to Dropbox
  set %d ; files="\"$1\""
  set %t ; for f in "$@"; do files="$files \"$f\""; done
  tmux send-keys -t SH "~/headless.sh dropbox_upload $files" C-m

+ t t
ez Copy
  set %D ; files="\"$1\""
  set %t ; for f in "$@"; do files="$files \"$f\""; done
  tmux send-keys -t SH "~/headless.sh easy_copy $files" C-m

 t t
ez Move
  set %D ; files="\"$1\""
  set %t ; for f in "$@"; do files="$files \"$f\""; done
  tmux send-keys -t SH "~/headless.sh easy_move $files" C-m

+ t t
ez Delete
  set %d ; files="\"$1\""
  set %t ; for f in "$@"; do files="$files \"$f\""; done
  tmux send-keys -t SH "~/headless.sh easy_delete $files" C-m

+ f\.avi | f\.AVI | f\.mkv | f\.MKV | f\.mp4 | f\.MP4 & t t
vlc upload (iphone)
  set %d ; files="\"$1\""
  set %t ; for f in "$@"; do files="$files \"$f\""; done
  tmux send-keys -t SH "~/headless.sh upload_vlc_iphone $files" C-m
  
+ f\.avi | f\.AVI | f\.mkv | f\.MKV | f\.mp4 | f\.MP4 & t t
vlc upload (ipad)
  set %d ; files="\"$1\""
  set %t ; for f in "$@"; do files="$files \"$f\""; done
  tmux send-keys -t SH "~/headless.sh upload_vlc_ipad $files" C-m

Download from Dropbox
  files="\"%{Dropbox Filename}\""
  tmux send-keys -t SH "~/headless.sh dropbox_download $files" C-m

+ t t
flac to mp3
  set %d ; files="\"$1\""
  set %t ; for f in "$@"; do files="$files \"$f\""; done
  tmux send-keys -t SH "~/headless.sh flac_to_mp3 $files" C-m

+ t t
m4a to mp3
  set %d ; files="\"$1\""
  set %t ; for f in "$@"; do files="$files \"$f\""; done
  tmux send-keys -t SH "~/headless.sh m4a_to_mp3 $files" C-m

TvDownload
  tmux send-keys -t SH "~/headless.sh tv_download" C-m

⠀
  # blank symbol line before (U+2800)
  tput reset

A Sync from Google Drive (Pull)
  tmux send-keys -t SH "clear ; cd /media/hdd/drive ; drive pull --no-prompt -fix-clashes" C-m

B Copy from drive/phoos to hdd/gphotos-upload
  tmux send-keys -t SH "clear ; echo \"Please do manually\"" C-m

C Send photos to Google Photos from hdd/gphotos-upload
  tmux send-keys -t SH "clear ; cd /home/pi/GooglePhotos ; node gp ; node gp upload" C-m

D backup photos & videos to backup hdd
  tmux send-keys -t SH "~/headless.sh backup_external_hdd" C-m

import SD card photos & upload to Google Drive
  cd /media/hdd/drive
  drive pull --no-prompt --fix-clashes
  drive clashes --fix
  if [ ! -d /media/cardreader ] ; then mkdir /media/cardreader ; fi
  sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader
  cp -v /media/cardreader/DCIM/???_PANA/*.JPG /media/hdd/drive/Photos/TEMP
  sudo umount /media/cardreader
  drive push --no-prompt
  tm "SD card photos uploaded to Google Drive"

import SD card videos & merge & upload to youtube
  rm /media/hdd/youtube-upload/*
  sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader
  cp -v /media/cardreader/DCIM/???_PANA/*.MP4 /media/hdd/youtube-upload
  sudo umount /media/cardreader
  tm "Import done You can remove SD card reader"
  cd /media/hdd/youtube-upload
  FILES=`find *.* -printf "%%f + " | sort`
  mkvmerge -o out.mkv $FILES
  youtube-upload --title="-" --privacy="private" out.mkv
  tm "Backup done Merge & uploaded to youtube"
  sleep 30m
  tm "Youtube done Can watch to youtube"

backup videos from youtube download playlist
  if [ ! -d /media/hdd/videos ] ; then mkdir /media/hdd/videos ; fi
  youtube-dl --limit-rate 4M --abort-on-error --format 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' \
  --merge-output-format mp4 --output "/media/hdd/videos/%%(title)s.%%(ext)s" https://www.youtube.com/playlist?list=$Playlist
  tm "backup videos from youtube download playlist done"

⠀
  # blank symbol line before (U+2800)
  tput reset

mount backup drive  
  sudo mount -t ntfs-3g -L backup /media/backup

mount ntfs usbkey
  tput reset ; sudo mount -t ntfs-3g `ls /dev/disk/by-id/usb*-part1` /media/usbkey

mount-cardreader
  tput reset ; sudo mount `ls /dev/disk/by-id/usb-Generic_STORAGE_DEVICE_*-part1` /media/cardreader

mount-hdd
   mkdir /media/hdd ; sudo mount /dev/sda1 /media/hdd

mount-tmp
  mkdir /tmp/hdd ; sudo mount /dev/sda2 /tmp/hdd

umount-tmp
  sudo umount /tmp/hdd

create fstab file
  tput reset
  echo 'LABEL="RaspberryPi" /media/hdd ext4 nofail,noatime 0 2' | sudo tee -a /etc/fstab
  echo '//mafreebox.freebox.fr/Server\ Freebox/ /media/freebox cifs _netdev,rw,user=freebox,password=Freebox4K,iocharset=utf8,uid=1000,sec=ntlm,file_mode=0777,dir_mode=0777,vers=1.0 0 0' | sudo tee -a /etc/fstab
  sudo chown -R pi:pi /media/hdd

Download from google drive
  param = %{Google Drive Filename}
  tput reset ; cd "/media/hdd/Drive"
  if ! drive pull --no-prompt "$param" ; then tm "ERROR Google pull files" "ERROR PULL DRIVE"; return; fi

+ t t
upload to Gdrive
  cd /media/hdd/Drive
  #drive pull --no-prompt "Raspberry Pi/"
  tput reset ; cd %d ; set %t
  for FILE in "$@"; do
    cp "$FILE" "/media/hdd/Drive/Raspberry Pi/"
  done
  cd /media/hdd/Drive
  if ! drive pull --no-prompt "Raspberry Pi/" ; then tm "ERROR Google push files ERROR PUSH DRIVE"; return; fi

import gopro
  ID="/dev/disk/by-id/usb-GoPro_Storage_*-0:0-part1"
  sudo mount $ID /media/gopro
  mkdir /media/hdd/gopro /media/hdd/gopro/photos /media/hdd/gopro/videos
  cp -v /media/gopro/DCIM/???GOPRO/*.JPG /media/hdd/gopro/photos
  cp -v /media/gopro/DCIM/???GOPRO/*.MP4 /media/hdd/gopro/videos
  tm "photos and videos from gopro are saved"
  rm /tmp/copy-gopro
  sudo umount /media/gopro

import usbkey
  ID="/dev/disk/by-id/usb-Kingston_DataTraveler_3.0_*-0:0-part1"
  VIDEOS="/media/hdd/youtube-upload"
  sudo mkdir /media/usbkey
  sudo mount $ID /media/usbkey
  rsync --archive --info=progress2 /media/usbkey/ $VIDEOS
  sudo umount /media/usbkey

+ f\.wav & t t
wav to mp3
  tput reset ; cd %d ; set %t
  for d in "$@"; do lame --preset extreme -q 0 -h "$1" "$1.mp3"; done

+ f\.mp3 & t t
concat mp3
  #sudo apt-get install mp3wrap
  tput reset ; cd %d ; set %t
  mp3wrap output.mp3 $@;

Take Raspberry Pi Photo
  raspistill -v -rot 180 -o /media/hdd/photo.jpg
  dropbox_uploader upload /media/hdd/photo.jpg /Camera/$(date +"%%Y%%m%%dT%%H%%M%%S").JPG
  rm /media/hdd/photo.jpg

Found double photos
  sudo apt-get -y install fslint fdupes
  /usr/share/fslint/fslint/fslint "/media/hdd/drive/Google Photos" > photos_double.txt
  fdupes -Sr "/media/hdd/drive/Google Photos" > ~/photos_double2.txt
  tm "Search double Photos Finish"

+ f\.avi | f\.AVI | f\.mkv | f\.MKV | f\.mp4 | f\.MP4 & t t
vlc upload (iphone)
  tput reset ; cd %d ; set %t
  for FILE in "$@"; do
   echo "Upload to VLC : $FILE"
   curl -# -F file=@"$FILE" http://192.168.0.151/upload.json
   echo
  done

+ f\.avi | f\.AVI | f\.mkv | f\.MKV | f\.mp4 | f\.MP4 & t t
vlc upload (ipad)
  tput reset ; cd %d ; set %t
  for FILE in "$@"; do
   echo "Upload to VLC : $FILE"
   curl -# -F file=@"$FILE" http://192.168.0.150/upload.json
   echo
  done

+ f *.mp4 | f *.MP4 & t t
conv mp4 to aac
  set %t
  aac="$(basename "$1" | cut -d . -f1).aac"
  avconv -loglevel panic -i "$1" -c copy -map 0:a:0 "$aac"

+ f \.mp4 | f \.MP4 & t t
mux mp4 and aac to mkv
  set %t
  aac="$(basename "$1" | cut -d. -f1).aac"
  mkv="$(basename "$1" | cut -d. -f1).mkv"
  MP4Box -add "$1" -add "$aac" "$mkv"

+ f \.avi | f \.AVI | f \.mkv | f \.mov | f \.MOV | f \.mp4 | f \.MP4 | f \.mts | f \.webm | f \.wmv & t t
upload to youtube
  cd %d ; set %t
  for FILE in "$@"; do
    #while ! youtube-upload --title="$FILE" --category="Entertainment" --privacy="private" \
    youtube-upload --title="-" --privacy="private" "$FILE"
    #"$FILE" ; do :; done
  done
  tm "Youtube Upload done"

+ f \.mts | f \.MTS | f \.mov | f \.MOV | f \.avi | f \.AVI | f \.mp4 | f \.MP4 | f \.webm & t t
merge mkv
  tput reset ; cd %d ; set %t
  FILES="$1"; shift
  for FILE in "$@"; do
    FILES="$FILES + $FILE"
  done
  mkvmerge -o out.mkv $FILES

+ f \.mp4 | f \.MP4 & t t
merge mp4
  tput reset ; cd %d ; set %t
  #FILES="-cat $1" ; shift
  FILES="-force-cat -add $1" ; shift
  for FILE in "$@"; do
    FILES="$FILES -cat $FILE"
  done
  echo "$FILES"
  MP4Box $FILES -new merged.mp4

+ f \.mp4 | f \.MP4 & t t
extract mp4 video without sound
  tput reset ; cd %d ; set %t
  #Never tested
  for FILE in "$@"; do
    mkvextract tracks out.mkv 0:$1.mp4
    shift
  done

+ f \.mp4 | f \.MP4 & t t
rotate 90 mp4
  tput reset ; cd %d ; set %t
  for FILE in "$@"; do
    avconv -i "$FILE" -vf transpose=1 -strict experimental "Rotate-$FILE"
  done

+ f \.mov | f \.MOV | f \.avi | f \.AVI | f \.mp4 | f \.MP4 | f \.mkv | f \.MKV & t t
cut video
  tput reset
  read -e -p "Start : " -i "00:00:00" start
  read -e -p "Stop  : " -i "00:00:00" stop
  echo "Please Wait..."
  mpv -ss $start -endpos $stop -ovc copy -oac pcm %f -o %b-CUT.%x

create stopmotion
  # - 720p (1280×720)
  # – 1080p (1920×1080) full HD
  # – 1440p (2560×1440) 2K
  # – 2160p (3840×2160) 4K
  # – 4320p (7680×4320) 8K
  ###GoPro 2592x1944 => 1440p(2K):2560x1440
  ###DMC TZ40 ????x???? => 1440p(2K):2560x1440
  CUT="2560x1440+16+0" #Top
  #CUT="2560x1440+16+252" #Center
  #CUT="2560x1440+16+504" #Bas
  ###Sony 4000x3000 => 2160p(4K):3840x2160
  #CUT="3840x2160+80+0" #Top
  #CUT="3840x2160+80+420" #Center
  #CUT="3840x2160+80+840" #Bas
  cd /media/hdd/DCIM
  mkdir CROP
  for img in *.JPG; do
  echo "Convert $img"
  #convert "$img" -crop $CUT "CROP/$img-CROP.JPG"
  #convert -rotate "90" "$img" "CROP/$img-CROP.JPG"
  done
  #ls -1 CROP/*-CROP.JPG >  files.lst
  ls -1 *.JPG >  files.lst
  mpv mf://@files.lst -mf-type=jpg -mf-fps=7.5 -ovc=rawvideo -no-audio -o stopmotion.avi
  youtube-upload --title="Stopmotion" --category="Entertainment" --privacy="private" stopmotion.avi
  tm "Raspberry Pi Stopmotion created"

download youtube playlist and merge with external music
  youtube-dl -k https://www.youtube.com/playlist?list=1234567890
  #Be careful first add next cat
  FILES="-force-cat -add 1.mp4 -cat 2.mp4 -cat 3.mp4 (...)"
  MP4Box $FILES -new merged.mp4
  mkvmerge -o output-with-sound.mkv -A input-video.mkv soundfile.mp3

download music from youtube video
  youtube-dl --extract-audio --audio-format mp3 $1 -o temp.mp3
  avconv -i temp.mp3 -ss 00:13:58 -to 00:15:44 -c copy -y music.mp3
  avconv -i "concat:1.MTS|2.MTS|3.MTS" -c copy output.mts

+ f *.jpg | f *.JPG
drive push rpi
  drive push --no-prompt

+ f *.jpg | f *.JPG
drive pull rpi
  drive pull --no-prompt

+ f *.pdf | f *.PDF & t t
Uncrypt PDF
  set %t
  while [ -n "$1" ]; do
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$1.uncrypted.pdf" "$1"
    shift
  done

⠀
  # blank symbol line before (U+2800)
  tput reset

A Drive pull Documents and Snoozed
  GDRIVE=/media/hdd/drive ; cd $GDRIVE
  if ! drive pull --no-prompt -fix-clashes $GDRIVE/Snoozed $GDRIVE/Documents $GDRIVE/Notices ; then tm "Merge PDF RROR PULL GDRIVE" ; exit; fi

+ t t
B Merge PDF T source files t destination File
  # T source files t destination Files
  array=()
  set %T ; for FILE in "$@"; do
    if grep -r "Encrypt" "%D/$FILE" ; then echo "ERROR : $FILE CRYPTED" ; tm "ERROR PDF CRYPTED $FILE"; exit; fi
    array+=("%D/$FILE") ; done
  set %t ; for FILE in "$@"; do
    if grep -r "Encrypt" "%d/$FILE" ; then echo "ERROR : $FILE CRYPTED" ; tm "ERROR PDF CRYPTED $FILE"; exit; fi
    array+=("%d/$FILE") ; done
  pdfunite "${array[@]}" "$(dirname "${array[-1]}")/!$(basename "${array[-1]}")"
  rm "${array[@]}"
  tm "ALL PDF FILES MERGED SUCCESSFULLY"

C Drive push Documents and Snoozed
  GDRIVE=/media/hdd/drive ; cd $GDRIVE
  if ! drive push --no-prompt $GDRIVE/Snoozed $GDRIVE/Documents $GDRIVE/Notices ; then iftt "Merge PDF" "ERROR PUSH GDRIVE" ; exit; fi

